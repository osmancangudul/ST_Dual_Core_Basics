
demo_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d60  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005ff8  08005ff8  00015ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006040  08006040  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006040  08006040  00016040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006048  08006048  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006048  08006048  00016048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800604c  0800604c  0001604c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08006050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  24000010  08006060  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000110  08006060  00020110  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 13 .debug_info   000151cc  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024ef  00000000  00000000  0003524d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001080  00000000  00000000  00037740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cec  00000000  00000000  000387c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003f48f  00000000  00000000  000394ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000144af  00000000  00000000  0007893b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0019fa08  00000000  00000000  0008cdea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004654  00000000  00000000  0022c7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00230e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005fe0 	.word	0x08005fe0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005fe0 	.word	0x08005fe0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800070c:	bf00      	nop
 800070e:	4b2c      	ldr	r3, [pc, #176]	; (80007c0 <main+0xc0>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <main+0x24>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dcf4      	bgt.n	800070e <main+0xe>
  if ( timeout < 0 )
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da01      	bge.n	800072e <main+0x2e>
  {
  Error_Handler();
 800072a:	f000 f9bf 	bl	8000aac <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 facd 	bl	8000ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f84d 	bl	80007d0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000736:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <main+0xc0>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a20      	ldr	r2, [pc, #128]	; (80007c0 <main+0xc0>)
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <main+0xc0>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000754:	2000      	movs	r0, #0
 8000756:	f000 fee5 	bl	8001524 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075a:	2100      	movs	r1, #0
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fefb 	bl	8001558 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000766:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000768:	bf00      	nop
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <main+0xc0>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d104      	bne.n	8000780 <main+0x80>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	dcf4      	bgt.n	800076a <main+0x6a>
if ( timeout < 0 )
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	da01      	bge.n	800078a <main+0x8a>
{
Error_Handler();
 8000786:	f000 f991 	bl	8000aac <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f000 f939 	bl	8000a00 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800078e:	f000 f8eb 	bl	8000968 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000792:	f000 f899 	bl	80008c8 <MX_TIM3_Init>

  /* USER CODE BEGIN 2 */
  HAL_EXTI_D2_EventInputConfig(EXTI_LINE17 , EXTI_MODE_IT,  ENABLE);
 8000796:	2201      	movs	r2, #1
 8000798:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800079c:	2011      	movs	r0, #17
 800079e:	f000 fb57 	bl	8000e50 <HAL_EXTI_D2_EventInputConfig>

HAL_UART_Transmit(&huart1, "HELLO World!", strlen("HELLO World!"), 1000);
 80007a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a6:	220c      	movs	r2, #12
 80007a8:	4906      	ldr	r1, [pc, #24]	; (80007c4 <main+0xc4>)
 80007aa:	4807      	ldr	r0, [pc, #28]	; (80007c8 <main+0xc8>)
 80007ac:	f004 fad8 	bl	8004d60 <HAL_UART_Transmit>

HAL_Delay(1000);
 80007b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b4:	f000 fb1c 	bl	8000df0 <HAL_Delay>

HAL_TIM_Base_Start_IT(&htim3);
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <main+0xcc>)
 80007ba:	f003 fde5 	bl	8004388 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007be:	e7fe      	b.n	80007be <main+0xbe>
 80007c0:	58024400 	.word	0x58024400
 80007c4:	08005ff8 	.word	0x08005ff8
 80007c8:	24000078 	.word	0x24000078
 80007cc:	2400002c 	.word	0x2400002c

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b09c      	sub	sp, #112	; 0x70
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007da:	224c      	movs	r2, #76	; 0x4c
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f005 fbd2 	bl	8005f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2220      	movs	r2, #32
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f005 fbcc 	bl	8005f88 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007f0:	2004      	movs	r0, #4
 80007f2:	f000 fec5 	bl	8001580 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b31      	ldr	r3, [pc, #196]	; (80008c0 <SystemClock_Config+0xf0>)
 80007fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fe:	4a30      	ldr	r2, [pc, #192]	; (80008c0 <SystemClock_Config+0xf0>)
 8000800:	f023 0301 	bic.w	r3, r3, #1
 8000804:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000806:	4b2e      	ldr	r3, [pc, #184]	; (80008c0 <SystemClock_Config+0xf0>)
 8000808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	4b2c      	ldr	r3, [pc, #176]	; (80008c4 <SystemClock_Config+0xf4>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a2b      	ldr	r2, [pc, #172]	; (80008c4 <SystemClock_Config+0xf4>)
 8000816:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b29      	ldr	r3, [pc, #164]	; (80008c4 <SystemClock_Config+0xf4>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000828:	bf00      	nop
 800082a:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <SystemClock_Config+0xf4>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000836:	d1f8      	bne.n	800082a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000838:	2302      	movs	r3, #2
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800083c:	2301      	movs	r3, #1
 800083e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000840:	2340      	movs	r3, #64	; 0x40
 8000842:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000844:	2302      	movs	r3, #2
 8000846:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000848:	2300      	movs	r3, #0
 800084a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800084c:	2304      	movs	r3, #4
 800084e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000850:	2332      	movs	r3, #50	; 0x32
 8000852:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000854:	2302      	movs	r3, #2
 8000856:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000858:	2302      	movs	r3, #2
 800085a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800085c:	2302      	movs	r3, #2
 800085e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000860:	230c      	movs	r3, #12
 8000862:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000864:	2300      	movs	r3, #0
 8000866:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000870:	4618      	mov	r0, r3
 8000872:	f000 fedf 	bl	8001634 <HAL_RCC_OscConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800087c:	f000 f916 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000880:	233f      	movs	r3, #63	; 0x3f
 8000882:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000884:	2303      	movs	r3, #3
 8000886:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800088c:	2308      	movs	r3, #8
 800088e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000890:	2340      	movs	r3, #64	; 0x40
 8000892:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000894:	2340      	movs	r3, #64	; 0x40
 8000896:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800089e:	2340      	movs	r3, #64	; 0x40
 80008a0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2102      	movs	r1, #2
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 fb1e 	bl	8001ee8 <HAL_RCC_ClockConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80008b2:	f000 f8fb 	bl	8000aac <Error_Handler>
  }
}
 80008b6:	bf00      	nop
 80008b8:	3770      	adds	r7, #112	; 0x70
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	58000400 	.word	0x58000400
 80008c4:	58024800 	.word	0x58024800

080008c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008e6:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <MX_TIM3_Init+0x98>)
 80008e8:	4a1e      	ldr	r2, [pc, #120]	; (8000964 <MX_TIM3_Init+0x9c>)
 80008ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 19999;
 80008ec:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <MX_TIM3_Init+0x98>)
 80008ee:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80008f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_TIM3_Init+0x98>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <MX_TIM3_Init+0x98>)
 80008fc:	f242 7210 	movw	r2, #10000	; 0x2710
 8000900:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_TIM3_Init+0x98>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_TIM3_Init+0x98>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800090e:	4814      	ldr	r0, [pc, #80]	; (8000960 <MX_TIM3_Init+0x98>)
 8000910:	f003 fce2 	bl	80042d8 <HAL_TIM_Base_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800091a:	f000 f8c7 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800091e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000922:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	4619      	mov	r1, r3
 800092a:	480d      	ldr	r0, [pc, #52]	; (8000960 <MX_TIM3_Init+0x98>)
 800092c:	f003 fec4 	bl	80046b8 <HAL_TIM_ConfigClockSource>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000936:	f000 f8b9 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	4619      	mov	r1, r3
 8000946:	4806      	ldr	r0, [pc, #24]	; (8000960 <MX_TIM3_Init+0x98>)
 8000948:	f004 f90e 	bl	8004b68 <HAL_TIMEx_MasterConfigSynchronization>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000952:	f000 f8ab 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	3720      	adds	r7, #32
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2400002c 	.word	0x2400002c
 8000964:	40000400 	.word	0x40000400

08000968 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800096c:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 800096e:	4a23      	ldr	r2, [pc, #140]	; (80009fc <MX_USART1_UART_Init+0x94>)
 8000970:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000972:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 8000974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000978:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000986:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b0:	4811      	ldr	r0, [pc, #68]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009b2:	f004 f985 	bl	8004cc0 <HAL_UART_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009bc:	f000 f876 	bl	8000aac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c0:	2100      	movs	r1, #0
 80009c2:	480d      	ldr	r0, [pc, #52]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009c4:	f005 fa15 	bl	8005df2 <HAL_UARTEx_SetTxFifoThreshold>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009ce:	f000 f86d 	bl	8000aac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d2:	2100      	movs	r1, #0
 80009d4:	4808      	ldr	r0, [pc, #32]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009d6:	f005 fa4a 	bl	8005e6e <HAL_UARTEx_SetRxFifoThreshold>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009e0:	f000 f864 	bl	8000aac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009e6:	f005 f9cb 	bl	8005d80 <HAL_UARTEx_DisableFifoMode>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009f0:	f000 f85c 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	24000078 	.word	0x24000078
 80009fc:	40011000 	.word	0x40011000

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <MX_GPIO_Init+0x84>)
 8000a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1c:	4a19      	ldr	r2, [pc, #100]	; (8000a84 <MX_GPIO_Init+0x84>)
 8000a1e:	f043 0301 	orr.w	r3, r3, #1
 8000a22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <MX_GPIO_Init+0x84>)
 8000a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a34:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <MX_GPIO_Init+0x84>)
 8000a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3a:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <MX_GPIO_Init+0x84>)
 8000a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_GPIO_Init+0x84>)
 8000a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a58:	480b      	ldr	r0, [pc, #44]	; (8000a88 <MX_GPIO_Init+0x88>)
 8000a5a:	f000 fd2f 	bl	80014bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	4619      	mov	r1, r3
 8000a76:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_GPIO_Init+0x88>)
 8000a78:	f000 fb70 	bl	800115c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a7c:	bf00      	nop
 8000a7e:	3720      	adds	r7, #32
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	58024400 	.word	0x58024400
 8000a88:	58022000 	.word	0x58022000

08000a8c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000a94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a98:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000a9a:	f000 fd28 	bl	80014ee <HAL_GPIO_TogglePin>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	58022000 	.word	0x58022000

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <Error_Handler+0x8>
	...

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <HAL_MspInit+0x30>)
 8000ac0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ac4:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <HAL_MspInit+0x30>)
 8000ac6:	f043 0302 	orr.w	r3, r3, #2
 8000aca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_MspInit+0x30>)
 8000ad0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	58024400 	.word	0x58024400

08000aec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0e      	ldr	r2, [pc, #56]	; (8000b34 <HAL_TIM_Base_MspInit+0x48>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d116      	bne.n	8000b2c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_TIM_Base_MspInit+0x4c>)
 8000b00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b04:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <HAL_TIM_Base_MspInit+0x4c>)
 8000b06:	f043 0302 	orr.w	r3, r3, #2
 8000b0a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <HAL_TIM_Base_MspInit+0x4c>)
 8000b10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b14:	f003 0302 	and.w	r3, r3, #2
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	201d      	movs	r0, #29
 8000b22:	f000 fae6 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b26:	201d      	movs	r0, #29
 8000b28:	f000 fafd 	bl	8001126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40000400 	.word	0x40000400
 8000b38:	58024400 	.word	0x58024400

08000b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b0bc      	sub	sp, #240	; 0xf0
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b54:	f107 0310 	add.w	r3, r7, #16
 8000b58:	22c8      	movs	r2, #200	; 0xc8
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f005 fa13 	bl	8005f88 <memset>
  if(huart->Instance==USART1)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a27      	ldr	r2, [pc, #156]	; (8000c04 <HAL_UART_MspInit+0xc8>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d146      	bne.n	8000bfa <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b6c:	f04f 0201 	mov.w	r2, #1
 8000b70:	f04f 0300 	mov.w	r3, #0
 8000b74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7e:	f107 0310 	add.w	r3, r7, #16
 8000b82:	4618      	mov	r0, r3
 8000b84:	f001 fd3c 	bl	8002600 <HAL_RCCEx_PeriphCLKConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000b8e:	f7ff ff8d 	bl	8000aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b92:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <HAL_UART_MspInit+0xcc>)
 8000b94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b98:	4a1b      	ldr	r2, [pc, #108]	; (8000c08 <HAL_UART_MspInit+0xcc>)
 8000b9a:	f043 0310 	orr.w	r3, r3, #16
 8000b9e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000ba2:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <HAL_UART_MspInit+0xcc>)
 8000ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ba8:	f003 0310 	and.w	r3, r3, #16
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <HAL_UART_MspInit+0xcc>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb6:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <HAL_UART_MspInit+0xcc>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_UART_MspInit+0xcc>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000bce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000be8:	2307      	movs	r3, #7
 8000bea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <HAL_UART_MspInit+0xd0>)
 8000bf6:	f000 fab1 	bl	800115c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bfa:	bf00      	nop
 8000bfc:	37f0      	adds	r7, #240	; 0xf0
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40011000 	.word	0x40011000
 8000c08:	58024400 	.word	0x58024400
 8000c0c:	58020000 	.word	0x58020000

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c14:	e7fe      	b.n	8000c14 <NMI_Handler+0x4>

08000c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <MemManage_Handler+0x4>

08000c22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <BusFault_Handler+0x4>

08000c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <UsageFault_Handler+0x4>

08000c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5c:	f000 f8a8 	bl	8000db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <TIM3_IRQHandler+0x10>)
 8000c6a:	f003 fc05 	bl	8004478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	2400002c 	.word	0x2400002c

08000c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c7c:	f7ff fcaa 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c80:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c82:	490d      	ldr	r1, [pc, #52]	; (8000cb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c84:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c88:	e002      	b.n	8000c90 <LoopCopyDataInit>

08000c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8e:	3304      	adds	r3, #4

08000c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c94:	d3f9      	bcc.n	8000c8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c98:	4c0a      	ldr	r4, [pc, #40]	; (8000cc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c9c:	e001      	b.n	8000ca2 <LoopFillZerobss>

08000c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca0:	3204      	adds	r2, #4

08000ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca4:	d3fb      	bcc.n	8000c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ca6:	f005 f977 	bl	8005f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000caa:	f7ff fd29 	bl	8000700 <main>
  bx  lr
 8000cae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cb0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000cb4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cb8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000cbc:	08006050 	.word	0x08006050
  ldr r2, =_sbss
 8000cc0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000cc4:	24000110 	.word	0x24000110

08000cc8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc8:	e7fe      	b.n	8000cc8 <ADC3_IRQHandler>
	...

08000ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd2:	2003      	movs	r0, #3
 8000cd4:	f000 fa02 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cd8:	f001 fabc 	bl	8002254 <HAL_RCC_GetSysClockFreq>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <HAL_Init+0x68>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	0a1b      	lsrs	r3, r3, #8
 8000ce4:	f003 030f 	and.w	r3, r3, #15
 8000ce8:	4913      	ldr	r1, [pc, #76]	; (8000d38 <HAL_Init+0x6c>)
 8000cea:	5ccb      	ldrb	r3, [r1, r3]
 8000cec:	f003 031f 	and.w	r3, r3, #31
 8000cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cf4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <HAL_Init+0x68>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <HAL_Init+0x6c>)
 8000d00:	5cd3      	ldrb	r3, [r2, r3]
 8000d02:	f003 031f 	and.w	r3, r3, #31
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	fa22 f303 	lsr.w	r3, r2, r3
 8000d0c:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <HAL_Init+0x70>)
 8000d0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d10:	4a0b      	ldr	r2, [pc, #44]	; (8000d40 <HAL_Init+0x74>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d16:	2000      	movs	r0, #0
 8000d18:	f000 f814 	bl	8000d44 <HAL_InitTick>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e002      	b.n	8000d2c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d26:	f7ff fec7 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	58024400 	.word	0x58024400
 8000d38:	08006008 	.word	0x08006008
 8000d3c:	24000004 	.word	0x24000004
 8000d40:	24000000 	.word	0x24000000

08000d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <HAL_InitTick+0x60>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d101      	bne.n	8000d58 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e021      	b.n	8000d9c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <HAL_InitTick+0x64>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_InitTick+0x60>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4619      	mov	r1, r3
 8000d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f9e7 	bl	8001142 <HAL_SYSTICK_Config>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00e      	b.n	8000d9c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b0f      	cmp	r3, #15
 8000d82:	d80a      	bhi.n	8000d9a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d84:	2200      	movs	r2, #0
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d8c:	f000 f9b1 	bl	80010f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d90:	4a06      	ldr	r2, [pc, #24]	; (8000dac <HAL_InitTick+0x68>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	e000      	b.n	8000d9c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	2400000c 	.word	0x2400000c
 8000da8:	24000000 	.word	0x24000000
 8000dac:	24000008 	.word	0x24000008

08000db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x20>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	2400000c 	.word	0x2400000c
 8000dd4:	2400010c 	.word	0x2400010c

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_GetTick+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	2400010c 	.word	0x2400010c

08000df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df8:	f7ff ffee 	bl	8000dd8 <HAL_GetTick>
 8000dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e08:	d005      	beq.n	8000e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_Delay+0x44>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4413      	add	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e16:	bf00      	nop
 8000e18:	f7ff ffde 	bl	8000dd8 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d8f7      	bhi.n	8000e18 <HAL_Delay+0x28>
  {
  }
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	2400000c 	.word	0x2400000c

08000e38 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <HAL_GetREVID+0x14>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	0c1b      	lsrs	r3, r3, #16
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	5c001000 	.word	0x5c001000

08000e50 <HAL_EXTI_D2_EventInputConfig>:
  * @param   EXTI_LineCmd controls (Enable/Disable) the EXTI line.

  * @retval None
  */
void HAL_EXTI_D2_EventInputConfig(uint32_t EXTI_Line , uint32_t EXTI_Mode,  uint32_t EXTI_LineCmd )
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  /* Check the parameter */
  assert_param(IS_EXTI_D2_LINE(EXTI_Line));
  assert_param(IS_EXTI_MODE_LINE(EXTI_Mode));

  if( (EXTI_Mode & EXTI_MODE_IT) == EXTI_MODE_IT)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d02d      	beq.n	8000ec2 <HAL_EXTI_D2_EventInputConfig+0x72>
  {
    if( EXTI_LineCmd == 0UL)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d116      	bne.n	8000e9a <HAL_EXTI_D2_EventInputConfig+0x4a>
    {
    /* Clear EXTI line configuration */
     CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D2->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	095a      	lsrs	r2, r3, #5
 8000e70:	4b30      	ldr	r3, [pc, #192]	; (8000f34 <HAL_EXTI_D2_EventInputConfig+0xe4>)
 8000e72:	4413      	add	r3, r2
 8000e74:	011b      	lsls	r3, r3, #4
 8000e76:	6819      	ldr	r1, [r3, #0]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 031f 	and.w	r3, r3, #31
 8000e7e:	2201      	movs	r2, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43da      	mvns	r2, r3
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	0958      	lsrs	r0, r3, #5
 8000e8a:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <HAL_EXTI_D2_EventInputConfig+0xe4>)
 8000e8c:	4403      	add	r3, r0
 8000e8e:	011b      	lsls	r3, r3, #4
 8000e90:	4618      	mov	r0, r3
 8000e92:	ea01 0302 	and.w	r3, r1, r2
 8000e96:	6003      	str	r3, [r0, #0]
 8000e98:	e013      	b.n	8000ec2 <HAL_EXTI_D2_EventInputConfig+0x72>
    }
    else
    {
     SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D2->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	095a      	lsrs	r2, r3, #5
 8000e9e:	4b25      	ldr	r3, [pc, #148]	; (8000f34 <HAL_EXTI_D2_EventInputConfig+0xe4>)
 8000ea0:	4413      	add	r3, r2
 8000ea2:	011b      	lsls	r3, r3, #4
 8000ea4:	6819      	ldr	r1, [r3, #0]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f003 031f 	and.w	r3, r3, #31
 8000eac:	2201      	movs	r2, #1
 8000eae:	409a      	lsls	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	0958      	lsrs	r0, r3, #5
 8000eb4:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <HAL_EXTI_D2_EventInputConfig+0xe4>)
 8000eb6:	4403      	add	r3, r0
 8000eb8:	011b      	lsls	r3, r3, #4
 8000eba:	4618      	mov	r0, r3
 8000ebc:	ea41 0302 	orr.w	r3, r1, r2
 8000ec0:	6003      	str	r3, [r0, #0]
    }
  }

  if( (EXTI_Mode & EXTI_MODE_EVT) == EXTI_MODE_EVT)
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d02d      	beq.n	8000f28 <HAL_EXTI_D2_EventInputConfig+0xd8>
  {
    if( EXTI_LineCmd == 0UL)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d116      	bne.n	8000f00 <HAL_EXTI_D2_EventInputConfig+0xb0>
    {
      /* Clear EXTI line configuration */
      CLEAR_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D2->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	095b      	lsrs	r3, r3, #5
 8000ed6:	011a      	lsls	r2, r3, #4
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <HAL_EXTI_D2_EventInputConfig+0xe8>)
 8000eda:	4413      	add	r3, r2
 8000edc:	6819      	ldr	r1, [r3, #0]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f003 031f 	and.w	r3, r3, #31
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43da      	mvns	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	095b      	lsrs	r3, r3, #5
 8000ef0:	0118      	lsls	r0, r3, #4
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_EXTI_D2_EventInputConfig+0xe8>)
 8000ef4:	4403      	add	r3, r0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	ea01 0302 	and.w	r3, r1, r2
 8000efc:	6003      	str	r3, [r0, #0]
    else
    {
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D2->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
    }
  }
}
 8000efe:	e013      	b.n	8000f28 <HAL_EXTI_D2_EventInputConfig+0xd8>
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D2->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	095b      	lsrs	r3, r3, #5
 8000f04:	011a      	lsls	r2, r3, #4
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <HAL_EXTI_D2_EventInputConfig+0xe8>)
 8000f08:	4413      	add	r3, r2
 8000f0a:	6819      	ldr	r1, [r3, #0]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 031f 	and.w	r3, r3, #31
 8000f12:	2201      	movs	r2, #1
 8000f14:	409a      	lsls	r2, r3
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	095b      	lsrs	r3, r3, #5
 8000f1a:	0118      	lsls	r0, r3, #4
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_EXTI_D2_EventInputConfig+0xe8>)
 8000f1e:	4403      	add	r3, r0
 8000f20:	4618      	mov	r0, r3
 8000f22:	ea41 0302 	orr.w	r3, r1, r2
 8000f26:	6003      	str	r3, [r0, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	0580000c 	.word	0x0580000c
 8000f38:	580000c4 	.word	0x580000c4

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <__NVIC_SetPriorityGrouping+0x40>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f66:	4313      	orrs	r3, r2
 8000f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6a:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <__NVIC_SetPriorityGrouping+0x40>)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	60d3      	str	r3, [r2, #12]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00
 8000f80:	05fa0000 	.word	0x05fa0000

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0b      	blt.n	8000fca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4907      	ldr	r1, [pc, #28]	; (8000fd8 <__NVIC_EnableIRQ+0x38>)
 8000fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	; (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	; (800102c <__NVIC_SetPriority+0x50>)
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	; 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010bc:	f7ff ff8e 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff29 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001100:	f7ff ff40 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 8001104:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	6978      	ldr	r0, [r7, #20]
 800110c:	f7ff ff90 	bl	8001030 <NVIC_EncodePriority>
 8001110:	4602      	mov	r2, r0
 8001112:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff5f 	bl	8000fdc <__NVIC_SetPriority>
}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001130:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff33 	bl	8000fa0 <__NVIC_EnableIRQ>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ffa4 	bl	8001098 <SysTick_Config>
 8001150:	4603      	mov	r3, r0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800116a:	4b89      	ldr	r3, [pc, #548]	; (8001390 <HAL_GPIO_Init+0x234>)
 800116c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800116e:	e194      	b.n	800149a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	2101      	movs	r1, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa01 f303 	lsl.w	r3, r1, r3
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 8186 	beq.w	8001494 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	2b01      	cmp	r3, #1
 8001192:	d005      	beq.n	80011a0 <HAL_GPIO_Init+0x44>
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d130      	bne.n	8001202 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	2203      	movs	r2, #3
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	68da      	ldr	r2, [r3, #12]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011d6:	2201      	movs	r2, #1
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	091b      	lsrs	r3, r3, #4
 80011ec:	f003 0201 	and.w	r2, r3, #1
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	2b03      	cmp	r3, #3
 800120c:	d017      	beq.n	800123e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	689a      	ldr	r2, [r3, #8]
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d123      	bne.n	8001292 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	08da      	lsrs	r2, r3, #3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3208      	adds	r2, #8
 8001252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	220f      	movs	r2, #15
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	691a      	ldr	r2, [r3, #16]
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	08da      	lsrs	r2, r3, #3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3208      	adds	r2, #8
 800128c:	69b9      	ldr	r1, [r7, #24]
 800128e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	2203      	movs	r2, #3
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0203 	and.w	r2, r3, #3
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 80e0 	beq.w	8001494 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d4:	4b2f      	ldr	r3, [pc, #188]	; (8001394 <HAL_GPIO_Init+0x238>)
 80012d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012da:	4a2e      	ldr	r2, [pc, #184]	; (8001394 <HAL_GPIO_Init+0x238>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012e4:	4b2b      	ldr	r3, [pc, #172]	; (8001394 <HAL_GPIO_Init+0x238>)
 80012e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012f2:	4a29      	ldr	r2, [pc, #164]	; (8001398 <HAL_GPIO_Init+0x23c>)
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	089b      	lsrs	r3, r3, #2
 80012f8:	3302      	adds	r3, #2
 80012fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	220f      	movs	r2, #15
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a20      	ldr	r2, [pc, #128]	; (800139c <HAL_GPIO_Init+0x240>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d052      	beq.n	80013c4 <HAL_GPIO_Init+0x268>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a1f      	ldr	r2, [pc, #124]	; (80013a0 <HAL_GPIO_Init+0x244>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d031      	beq.n	800138a <HAL_GPIO_Init+0x22e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a1e      	ldr	r2, [pc, #120]	; (80013a4 <HAL_GPIO_Init+0x248>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d02b      	beq.n	8001386 <HAL_GPIO_Init+0x22a>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a1d      	ldr	r2, [pc, #116]	; (80013a8 <HAL_GPIO_Init+0x24c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d025      	beq.n	8001382 <HAL_GPIO_Init+0x226>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a1c      	ldr	r2, [pc, #112]	; (80013ac <HAL_GPIO_Init+0x250>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d01f      	beq.n	800137e <HAL_GPIO_Init+0x222>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a1b      	ldr	r2, [pc, #108]	; (80013b0 <HAL_GPIO_Init+0x254>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d019      	beq.n	800137a <HAL_GPIO_Init+0x21e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a1a      	ldr	r2, [pc, #104]	; (80013b4 <HAL_GPIO_Init+0x258>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d013      	beq.n	8001376 <HAL_GPIO_Init+0x21a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a19      	ldr	r2, [pc, #100]	; (80013b8 <HAL_GPIO_Init+0x25c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d00d      	beq.n	8001372 <HAL_GPIO_Init+0x216>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a18      	ldr	r2, [pc, #96]	; (80013bc <HAL_GPIO_Init+0x260>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d007      	beq.n	800136e <HAL_GPIO_Init+0x212>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a17      	ldr	r2, [pc, #92]	; (80013c0 <HAL_GPIO_Init+0x264>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d101      	bne.n	800136a <HAL_GPIO_Init+0x20e>
 8001366:	2309      	movs	r3, #9
 8001368:	e02d      	b.n	80013c6 <HAL_GPIO_Init+0x26a>
 800136a:	230a      	movs	r3, #10
 800136c:	e02b      	b.n	80013c6 <HAL_GPIO_Init+0x26a>
 800136e:	2308      	movs	r3, #8
 8001370:	e029      	b.n	80013c6 <HAL_GPIO_Init+0x26a>
 8001372:	2307      	movs	r3, #7
 8001374:	e027      	b.n	80013c6 <HAL_GPIO_Init+0x26a>
 8001376:	2306      	movs	r3, #6
 8001378:	e025      	b.n	80013c6 <HAL_GPIO_Init+0x26a>
 800137a:	2305      	movs	r3, #5
 800137c:	e023      	b.n	80013c6 <HAL_GPIO_Init+0x26a>
 800137e:	2304      	movs	r3, #4
 8001380:	e021      	b.n	80013c6 <HAL_GPIO_Init+0x26a>
 8001382:	2303      	movs	r3, #3
 8001384:	e01f      	b.n	80013c6 <HAL_GPIO_Init+0x26a>
 8001386:	2302      	movs	r3, #2
 8001388:	e01d      	b.n	80013c6 <HAL_GPIO_Init+0x26a>
 800138a:	2301      	movs	r3, #1
 800138c:	e01b      	b.n	80013c6 <HAL_GPIO_Init+0x26a>
 800138e:	bf00      	nop
 8001390:	58000080 	.word	0x58000080
 8001394:	58024400 	.word	0x58024400
 8001398:	58000400 	.word	0x58000400
 800139c:	58020000 	.word	0x58020000
 80013a0:	58020400 	.word	0x58020400
 80013a4:	58020800 	.word	0x58020800
 80013a8:	58020c00 	.word	0x58020c00
 80013ac:	58021000 	.word	0x58021000
 80013b0:	58021400 	.word	0x58021400
 80013b4:	58021800 	.word	0x58021800
 80013b8:	58021c00 	.word	0x58021c00
 80013bc:	58022000 	.word	0x58022000
 80013c0:	58022400 	.word	0x58022400
 80013c4:	2300      	movs	r3, #0
 80013c6:	69fa      	ldr	r2, [r7, #28]
 80013c8:	f002 0203 	and.w	r2, r2, #3
 80013cc:	0092      	lsls	r2, r2, #2
 80013ce:	4093      	lsls	r3, r2
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d6:	4938      	ldr	r1, [pc, #224]	; (80014b8 <HAL_GPIO_Init+0x35c>)
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	3302      	adds	r3, #2
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800140a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001438:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	3301      	adds	r3, #1
 8001498:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	fa22 f303 	lsr.w	r3, r2, r3
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f47f ae63 	bne.w	8001170 <HAL_GPIO_Init+0x14>
  }
}
 80014aa:	bf00      	nop
 80014ac:	bf00      	nop
 80014ae:	3724      	adds	r7, #36	; 0x24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	58000400 	.word	0x58000400

080014bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	807b      	strh	r3, [r7, #2]
 80014c8:	4613      	mov	r3, r2
 80014ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014cc:	787b      	ldrb	r3, [r7, #1]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d2:	887a      	ldrh	r2, [r7, #2]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80014d8:	e003      	b.n	80014e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014da:	887b      	ldrh	r3, [r7, #2]
 80014dc:	041a      	lsls	r2, r3, #16
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	619a      	str	r2, [r3, #24]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b085      	sub	sp, #20
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	460b      	mov	r3, r1
 80014f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001500:	887a      	ldrh	r2, [r7, #2]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4013      	ands	r3, r2
 8001506:	041a      	lsls	r2, r3, #16
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	43d9      	mvns	r1, r3
 800150c:	887b      	ldrh	r3, [r7, #2]
 800150e:	400b      	ands	r3, r1
 8001510:	431a      	orrs	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	619a      	str	r2, [r3, #24]
}
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800152c:	4a08      	ldr	r2, [pc, #32]	; (8001550 <HAL_HSEM_FastTake+0x2c>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3320      	adds	r3, #32
 8001532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001536:	4a07      	ldr	r2, [pc, #28]	; (8001554 <HAL_HSEM_FastTake+0x30>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d101      	bne.n	8001540 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	e000      	b.n	8001542 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	58026400 	.word	0x58026400
 8001554:	80000300 	.word	0x80000300

08001558 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001562:	4906      	ldr	r1, [pc, #24]	; (800157c <HAL_HSEM_Release+0x24>)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	58026400 	.word	0x58026400

08001580 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001588:	4b29      	ldr	r3, [pc, #164]	; (8001630 <HAL_PWREx_ConfigSupply+0xb0>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	2b06      	cmp	r3, #6
 8001592:	d00a      	beq.n	80015aa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001594:	4b26      	ldr	r3, [pc, #152]	; (8001630 <HAL_PWREx_ConfigSupply+0xb0>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d001      	beq.n	80015a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e040      	b.n	8001628 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	e03e      	b.n	8001628 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80015aa:	4b21      	ldr	r3, [pc, #132]	; (8001630 <HAL_PWREx_ConfigSupply+0xb0>)
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80015b2:	491f      	ldr	r1, [pc, #124]	; (8001630 <HAL_PWREx_ConfigSupply+0xb0>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80015ba:	f7ff fc0d 	bl	8000dd8 <HAL_GetTick>
 80015be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015c0:	e009      	b.n	80015d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80015c2:	f7ff fc09 	bl	8000dd8 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015d0:	d901      	bls.n	80015d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e028      	b.n	8001628 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_PWREx_ConfigSupply+0xb0>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015e2:	d1ee      	bne.n	80015c2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b1e      	cmp	r3, #30
 80015e8:	d008      	beq.n	80015fc <HAL_PWREx_ConfigSupply+0x7c>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b2e      	cmp	r3, #46	; 0x2e
 80015ee:	d005      	beq.n	80015fc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b1d      	cmp	r3, #29
 80015f4:	d002      	beq.n	80015fc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b2d      	cmp	r3, #45	; 0x2d
 80015fa:	d114      	bne.n	8001626 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80015fc:	f7ff fbec 	bl	8000dd8 <HAL_GetTick>
 8001600:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001602:	e009      	b.n	8001618 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001604:	f7ff fbe8 	bl	8000dd8 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001612:	d901      	bls.n	8001618 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e007      	b.n	8001628 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <HAL_PWREx_ConfigSupply+0xb0>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001624:	d1ee      	bne.n	8001604 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	58024800 	.word	0x58024800

08001634 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08c      	sub	sp, #48	; 0x30
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d102      	bne.n	8001648 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	f000 bc48 	b.w	8001ed8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 8088 	beq.w	8001766 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001656:	4b99      	ldr	r3, [pc, #612]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001660:	4b96      	ldr	r3, [pc, #600]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001668:	2b10      	cmp	r3, #16
 800166a:	d007      	beq.n	800167c <HAL_RCC_OscConfig+0x48>
 800166c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166e:	2b18      	cmp	r3, #24
 8001670:	d111      	bne.n	8001696 <HAL_RCC_OscConfig+0x62>
 8001672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d10c      	bne.n	8001696 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167c:	4b8f      	ldr	r3, [pc, #572]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d06d      	beq.n	8001764 <HAL_RCC_OscConfig+0x130>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d169      	bne.n	8001764 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	f000 bc21 	b.w	8001ed8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800169e:	d106      	bne.n	80016ae <HAL_RCC_OscConfig+0x7a>
 80016a0:	4b86      	ldr	r3, [pc, #536]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a85      	ldr	r2, [pc, #532]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 80016a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	e02e      	b.n	800170c <HAL_RCC_OscConfig+0xd8>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x9c>
 80016b6:	4b81      	ldr	r3, [pc, #516]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a80      	ldr	r2, [pc, #512]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 80016bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	4b7e      	ldr	r3, [pc, #504]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a7d      	ldr	r2, [pc, #500]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 80016c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	e01d      	b.n	800170c <HAL_RCC_OscConfig+0xd8>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016d8:	d10c      	bne.n	80016f4 <HAL_RCC_OscConfig+0xc0>
 80016da:	4b78      	ldr	r3, [pc, #480]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a77      	ldr	r2, [pc, #476]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 80016e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	4b75      	ldr	r3, [pc, #468]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a74      	ldr	r2, [pc, #464]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 80016ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	e00b      	b.n	800170c <HAL_RCC_OscConfig+0xd8>
 80016f4:	4b71      	ldr	r3, [pc, #452]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a70      	ldr	r2, [pc, #448]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 80016fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	4b6e      	ldr	r3, [pc, #440]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a6d      	ldr	r2, [pc, #436]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 8001706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800170a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d013      	beq.n	800173c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001714:	f7ff fb60 	bl	8000dd8 <HAL_GetTick>
 8001718:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800171c:	f7ff fb5c 	bl	8000dd8 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b64      	cmp	r3, #100	; 0x64
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e3d4      	b.n	8001ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800172e:	4b63      	ldr	r3, [pc, #396]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0xe8>
 800173a:	e014      	b.n	8001766 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173c:	f7ff fb4c 	bl	8000dd8 <HAL_GetTick>
 8001740:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001744:	f7ff fb48 	bl	8000dd8 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b64      	cmp	r3, #100	; 0x64
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e3c0      	b.n	8001ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001756:	4b59      	ldr	r3, [pc, #356]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0x110>
 8001762:	e000      	b.n	8001766 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 80ca 	beq.w	8001908 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001774:	4b51      	ldr	r3, [pc, #324]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800177c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800177e:	4b4f      	ldr	r3, [pc, #316]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d007      	beq.n	800179a <HAL_RCC_OscConfig+0x166>
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	2b18      	cmp	r3, #24
 800178e:	d156      	bne.n	800183e <HAL_RCC_OscConfig+0x20a>
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d151      	bne.n	800183e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800179a:	4b48      	ldr	r3, [pc, #288]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d005      	beq.n	80017b2 <HAL_RCC_OscConfig+0x17e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e392      	b.n	8001ed8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017b2:	4b42      	ldr	r3, [pc, #264]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f023 0219 	bic.w	r2, r3, #25
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	493f      	ldr	r1, [pc, #252]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff fb08 	bl	8000dd8 <HAL_GetTick>
 80017c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017cc:	f7ff fb04 	bl	8000dd8 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e37c      	b.n	8001ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017de:	4b37      	ldr	r3, [pc, #220]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ea:	f7ff fb25 	bl	8000e38 <HAL_GetREVID>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d817      	bhi.n	8001828 <HAL_RCC_OscConfig+0x1f4>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	2b40      	cmp	r3, #64	; 0x40
 80017fe:	d108      	bne.n	8001812 <HAL_RCC_OscConfig+0x1de>
 8001800:	4b2e      	ldr	r3, [pc, #184]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001808:	4a2c      	ldr	r2, [pc, #176]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 800180a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800180e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001810:	e07a      	b.n	8001908 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001812:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	031b      	lsls	r3, r3, #12
 8001820:	4926      	ldr	r1, [pc, #152]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 8001822:	4313      	orrs	r3, r2
 8001824:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001826:	e06f      	b.n	8001908 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001828:	4b24      	ldr	r3, [pc, #144]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	061b      	lsls	r3, r3, #24
 8001836:	4921      	ldr	r1, [pc, #132]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800183c:	e064      	b.n	8001908 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d047      	beq.n	80018d6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001846:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 0219 	bic.w	r2, r3, #25
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	491a      	ldr	r1, [pc, #104]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 8001854:	4313      	orrs	r3, r2
 8001856:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff fabe 	bl	8000dd8 <HAL_GetTick>
 800185c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001860:	f7ff faba 	bl	8000dd8 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e332      	b.n	8001ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001872:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187e:	f7ff fadb 	bl	8000e38 <HAL_GetREVID>
 8001882:	4603      	mov	r3, r0
 8001884:	f241 0203 	movw	r2, #4099	; 0x1003
 8001888:	4293      	cmp	r3, r2
 800188a:	d819      	bhi.n	80018c0 <HAL_RCC_OscConfig+0x28c>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	2b40      	cmp	r3, #64	; 0x40
 8001892:	d108      	bne.n	80018a6 <HAL_RCC_OscConfig+0x272>
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800189c:	4a07      	ldr	r2, [pc, #28]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 800189e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a2:	6053      	str	r3, [r2, #4]
 80018a4:	e030      	b.n	8001908 <HAL_RCC_OscConfig+0x2d4>
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	031b      	lsls	r3, r3, #12
 80018b4:	4901      	ldr	r1, [pc, #4]	; (80018bc <HAL_RCC_OscConfig+0x288>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	604b      	str	r3, [r1, #4]
 80018ba:	e025      	b.n	8001908 <HAL_RCC_OscConfig+0x2d4>
 80018bc:	58024400 	.word	0x58024400
 80018c0:	4b9a      	ldr	r3, [pc, #616]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	061b      	lsls	r3, r3, #24
 80018ce:	4997      	ldr	r1, [pc, #604]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
 80018d4:	e018      	b.n	8001908 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d6:	4b95      	ldr	r3, [pc, #596]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a94      	ldr	r2, [pc, #592]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 80018dc:	f023 0301 	bic.w	r3, r3, #1
 80018e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e2:	f7ff fa79 	bl	8000dd8 <HAL_GetTick>
 80018e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ea:	f7ff fa75 	bl	8000dd8 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e2ed      	b.n	8001ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018fc:	4b8b      	ldr	r3, [pc, #556]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1f0      	bne.n	80018ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 80a9 	beq.w	8001a68 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001916:	4b85      	ldr	r3, [pc, #532]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800191e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001920:	4b82      	ldr	r3, [pc, #520]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 8001922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001924:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	2b08      	cmp	r3, #8
 800192a:	d007      	beq.n	800193c <HAL_RCC_OscConfig+0x308>
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	2b18      	cmp	r3, #24
 8001930:	d13a      	bne.n	80019a8 <HAL_RCC_OscConfig+0x374>
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	2b01      	cmp	r3, #1
 800193a:	d135      	bne.n	80019a8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800193c:	4b7b      	ldr	r3, [pc, #492]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <HAL_RCC_OscConfig+0x320>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	2b80      	cmp	r3, #128	; 0x80
 800194e:	d001      	beq.n	8001954 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e2c1      	b.n	8001ed8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001954:	f7ff fa70 	bl	8000e38 <HAL_GetREVID>
 8001958:	4603      	mov	r3, r0
 800195a:	f241 0203 	movw	r2, #4099	; 0x1003
 800195e:	4293      	cmp	r3, r2
 8001960:	d817      	bhi.n	8001992 <HAL_RCC_OscConfig+0x35e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	2b20      	cmp	r3, #32
 8001968:	d108      	bne.n	800197c <HAL_RCC_OscConfig+0x348>
 800196a:	4b70      	ldr	r3, [pc, #448]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001972:	4a6e      	ldr	r2, [pc, #440]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 8001974:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001978:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800197a:	e075      	b.n	8001a68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800197c:	4b6b      	ldr	r3, [pc, #428]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	069b      	lsls	r3, r3, #26
 800198a:	4968      	ldr	r1, [pc, #416]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 800198c:	4313      	orrs	r3, r2
 800198e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001990:	e06a      	b.n	8001a68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001992:	4b66      	ldr	r3, [pc, #408]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	061b      	lsls	r3, r3, #24
 80019a0:	4962      	ldr	r1, [pc, #392]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019a6:	e05f      	b.n	8001a68 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d042      	beq.n	8001a36 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80019b0:	4b5e      	ldr	r3, [pc, #376]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a5d      	ldr	r2, [pc, #372]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 80019b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff fa0c 	bl	8000dd8 <HAL_GetTick>
 80019c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80019c4:	f7ff fa08 	bl	8000dd8 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e280      	b.n	8001ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019d6:	4b55      	ldr	r3, [pc, #340]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019e2:	f7ff fa29 	bl	8000e38 <HAL_GetREVID>
 80019e6:	4603      	mov	r3, r0
 80019e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d817      	bhi.n	8001a20 <HAL_RCC_OscConfig+0x3ec>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	2b20      	cmp	r3, #32
 80019f6:	d108      	bne.n	8001a0a <HAL_RCC_OscConfig+0x3d6>
 80019f8:	4b4c      	ldr	r3, [pc, #304]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001a00:	4a4a      	ldr	r2, [pc, #296]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 8001a02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a06:	6053      	str	r3, [r2, #4]
 8001a08:	e02e      	b.n	8001a68 <HAL_RCC_OscConfig+0x434>
 8001a0a:	4b48      	ldr	r3, [pc, #288]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	069b      	lsls	r3, r3, #26
 8001a18:	4944      	ldr	r1, [pc, #272]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	604b      	str	r3, [r1, #4]
 8001a1e:	e023      	b.n	8001a68 <HAL_RCC_OscConfig+0x434>
 8001a20:	4b42      	ldr	r3, [pc, #264]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	061b      	lsls	r3, r3, #24
 8001a2e:	493f      	ldr	r1, [pc, #252]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	60cb      	str	r3, [r1, #12]
 8001a34:	e018      	b.n	8001a68 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001a36:	4b3d      	ldr	r3, [pc, #244]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a3c      	ldr	r2, [pc, #240]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 8001a3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a42:	f7ff f9c9 	bl	8000dd8 <HAL_GetTick>
 8001a46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a4a:	f7ff f9c5 	bl	8000dd8 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e23d      	b.n	8001ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a5c:	4b33      	ldr	r3, [pc, #204]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f0      	bne.n	8001a4a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d036      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d019      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 8001a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a80:	4a2a      	ldr	r2, [pc, #168]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a88:	f7ff f9a6 	bl	8000dd8 <HAL_GetTick>
 8001a8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a90:	f7ff f9a2 	bl	8000dd8 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e21a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001aa2:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 8001aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0x45c>
 8001aae:	e018      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab0:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 8001ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ab4:	4a1d      	ldr	r2, [pc, #116]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 8001ab6:	f023 0301 	bic.w	r3, r3, #1
 8001aba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001abc:	f7ff f98c 	bl	8000dd8 <HAL_GetTick>
 8001ac0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac4:	f7ff f988 	bl	8000dd8 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e200      	b.n	8001ed8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 8001ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0320 	and.w	r3, r3, #32
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d039      	beq.n	8001b62 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d01c      	beq.n	8001b30 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001af6:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a0c      	ldr	r2, [pc, #48]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 8001afc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b02:	f7ff f969 	bl	8000dd8 <HAL_GetTick>
 8001b06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b0a:	f7ff f965 	bl	8000dd8 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e1dd      	b.n	8001ed8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <HAL_RCC_OscConfig+0x4f8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x4d6>
 8001b28:	e01b      	b.n	8001b62 <HAL_RCC_OscConfig+0x52e>
 8001b2a:	bf00      	nop
 8001b2c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b30:	4b9b      	ldr	r3, [pc, #620]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a9a      	ldr	r2, [pc, #616]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001b36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b3a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b3c:	f7ff f94c 	bl	8000dd8 <HAL_GetTick>
 8001b40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b44:	f7ff f948 	bl	8000dd8 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e1c0      	b.n	8001ed8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b56:	4b92      	ldr	r3, [pc, #584]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 8081 	beq.w	8001c72 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b70:	4b8c      	ldr	r3, [pc, #560]	; (8001da4 <HAL_RCC_OscConfig+0x770>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a8b      	ldr	r2, [pc, #556]	; (8001da4 <HAL_RCC_OscConfig+0x770>)
 8001b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b7c:	f7ff f92c 	bl	8000dd8 <HAL_GetTick>
 8001b80:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b84:	f7ff f928 	bl	8000dd8 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b64      	cmp	r3, #100	; 0x64
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e1a0      	b.n	8001ed8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b96:	4b83      	ldr	r3, [pc, #524]	; (8001da4 <HAL_RCC_OscConfig+0x770>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d106      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x584>
 8001baa:	4b7d      	ldr	r3, [pc, #500]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bae:	4a7c      	ldr	r2, [pc, #496]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb6:	e02d      	b.n	8001c14 <HAL_RCC_OscConfig+0x5e0>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10c      	bne.n	8001bda <HAL_RCC_OscConfig+0x5a6>
 8001bc0:	4b77      	ldr	r3, [pc, #476]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc4:	4a76      	ldr	r2, [pc, #472]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001bc6:	f023 0301 	bic.w	r3, r3, #1
 8001bca:	6713      	str	r3, [r2, #112]	; 0x70
 8001bcc:	4b74      	ldr	r3, [pc, #464]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd0:	4a73      	ldr	r2, [pc, #460]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001bd2:	f023 0304 	bic.w	r3, r3, #4
 8001bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd8:	e01c      	b.n	8001c14 <HAL_RCC_OscConfig+0x5e0>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	2b05      	cmp	r3, #5
 8001be0:	d10c      	bne.n	8001bfc <HAL_RCC_OscConfig+0x5c8>
 8001be2:	4b6f      	ldr	r3, [pc, #444]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be6:	4a6e      	ldr	r2, [pc, #440]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001be8:	f043 0304 	orr.w	r3, r3, #4
 8001bec:	6713      	str	r3, [r2, #112]	; 0x70
 8001bee:	4b6c      	ldr	r3, [pc, #432]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf2:	4a6b      	ldr	r2, [pc, #428]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bfa:	e00b      	b.n	8001c14 <HAL_RCC_OscConfig+0x5e0>
 8001bfc:	4b68      	ldr	r3, [pc, #416]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c00:	4a67      	ldr	r2, [pc, #412]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001c02:	f023 0301 	bic.w	r3, r3, #1
 8001c06:	6713      	str	r3, [r2, #112]	; 0x70
 8001c08:	4b65      	ldr	r3, [pc, #404]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0c:	4a64      	ldr	r2, [pc, #400]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001c0e:	f023 0304 	bic.w	r3, r3, #4
 8001c12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d015      	beq.n	8001c48 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1c:	f7ff f8dc 	bl	8000dd8 <HAL_GetTick>
 8001c20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c22:	e00a      	b.n	8001c3a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c24:	f7ff f8d8 	bl	8000dd8 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e14e      	b.n	8001ed8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c3a:	4b59      	ldr	r3, [pc, #356]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0ee      	beq.n	8001c24 <HAL_RCC_OscConfig+0x5f0>
 8001c46:	e014      	b.n	8001c72 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c48:	f7ff f8c6 	bl	8000dd8 <HAL_GetTick>
 8001c4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c4e:	e00a      	b.n	8001c66 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c50:	f7ff f8c2 	bl	8000dd8 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e138      	b.n	8001ed8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c66:	4b4e      	ldr	r3, [pc, #312]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1ee      	bne.n	8001c50 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 812d 	beq.w	8001ed6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c7c:	4b48      	ldr	r3, [pc, #288]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c84:	2b18      	cmp	r3, #24
 8001c86:	f000 80bd 	beq.w	8001e04 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	f040 809e 	bne.w	8001dd0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c94:	4b42      	ldr	r3, [pc, #264]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a41      	ldr	r2, [pc, #260]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001c9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff f89a 	bl	8000dd8 <HAL_GetTick>
 8001ca4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca8:	f7ff f896 	bl	8000dd8 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e10e      	b.n	8001ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cba:	4b39      	ldr	r3, [pc, #228]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc6:	4b36      	ldr	r3, [pc, #216]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cca:	4b37      	ldr	r3, [pc, #220]	; (8001da8 <HAL_RCC_OscConfig+0x774>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cd6:	0112      	lsls	r2, r2, #4
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	4931      	ldr	r1, [pc, #196]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	628b      	str	r3, [r1, #40]	; 0x28
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	025b      	lsls	r3, r3, #9
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	041b      	lsls	r3, r3, #16
 8001cfe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	061b      	lsls	r3, r3, #24
 8001d0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001d10:	4923      	ldr	r1, [pc, #140]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001d16:	4b22      	ldr	r3, [pc, #136]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1a:	4a21      	ldr	r2, [pc, #132]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001d1c:	f023 0301 	bic.w	r3, r3, #1
 8001d20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d22:	4b1f      	ldr	r3, [pc, #124]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d26:	4b21      	ldr	r3, [pc, #132]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d2e:	00d2      	lsls	r2, r2, #3
 8001d30:	491b      	ldr	r1, [pc, #108]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001d36:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3a:	f023 020c 	bic.w	r2, r3, #12
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	4917      	ldr	r1, [pc, #92]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001d48:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	f023 0202 	bic.w	r2, r3, #2
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d54:	4912      	ldr	r1, [pc, #72]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5e:	4a10      	ldr	r2, [pc, #64]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6a:	4a0d      	ldr	r2, [pc, #52]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d82:	4a07      	ldr	r2, [pc, #28]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d8a:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <HAL_RCC_OscConfig+0x76c>)
 8001d90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d96:	f7ff f81f 	bl	8000dd8 <HAL_GetTick>
 8001d9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d9c:	e011      	b.n	8001dc2 <HAL_RCC_OscConfig+0x78e>
 8001d9e:	bf00      	nop
 8001da0:	58024400 	.word	0x58024400
 8001da4:	58024800 	.word	0x58024800
 8001da8:	fffffc0c 	.word	0xfffffc0c
 8001dac:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db0:	f7ff f812 	bl	8000dd8 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e08a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dc2:	4b47      	ldr	r3, [pc, #284]	; (8001ee0 <HAL_RCC_OscConfig+0x8ac>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0x77c>
 8001dce:	e082      	b.n	8001ed6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd0:	4b43      	ldr	r3, [pc, #268]	; (8001ee0 <HAL_RCC_OscConfig+0x8ac>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a42      	ldr	r2, [pc, #264]	; (8001ee0 <HAL_RCC_OscConfig+0x8ac>)
 8001dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ddc:	f7fe fffc 	bl	8000dd8 <HAL_GetTick>
 8001de0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de4:	f7fe fff8 	bl	8000dd8 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e070      	b.n	8001ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001df6:	4b3a      	ldr	r3, [pc, #232]	; (8001ee0 <HAL_RCC_OscConfig+0x8ac>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0x7b0>
 8001e02:	e068      	b.n	8001ed6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e04:	4b36      	ldr	r3, [pc, #216]	; (8001ee0 <HAL_RCC_OscConfig+0x8ac>)
 8001e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e08:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e0a:	4b35      	ldr	r3, [pc, #212]	; (8001ee0 <HAL_RCC_OscConfig+0x8ac>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d031      	beq.n	8001e7c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	f003 0203 	and.w	r2, r3, #3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d12a      	bne.n	8001e7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	091b      	lsrs	r3, r3, #4
 8001e2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d122      	bne.n	8001e7c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e40:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d11a      	bne.n	8001e7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	0a5b      	lsrs	r3, r3, #9
 8001e4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e52:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d111      	bne.n	8001e7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	0c1b      	lsrs	r3, r3, #16
 8001e5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e64:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d108      	bne.n	8001e7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	0e1b      	lsrs	r3, r3, #24
 8001e6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e76:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d001      	beq.n	8001e80 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e02b      	b.n	8001ed8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001e80:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <HAL_RCC_OscConfig+0x8ac>)
 8001e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e84:	08db      	lsrs	r3, r3, #3
 8001e86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e8a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d01f      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_RCC_OscConfig+0x8ac>)
 8001e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9a:	4a11      	ldr	r2, [pc, #68]	; (8001ee0 <HAL_RCC_OscConfig+0x8ac>)
 8001e9c:	f023 0301 	bic.w	r3, r3, #1
 8001ea0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ea2:	f7fe ff99 	bl	8000dd8 <HAL_GetTick>
 8001ea6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001ea8:	bf00      	nop
 8001eaa:	f7fe ff95 	bl	8000dd8 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d0f9      	beq.n	8001eaa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_RCC_OscConfig+0x8ac>)
 8001eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <HAL_RCC_OscConfig+0x8b0>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ec2:	00d2      	lsls	r2, r2, #3
 8001ec4:	4906      	ldr	r1, [pc, #24]	; (8001ee0 <HAL_RCC_OscConfig+0x8ac>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001eca:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <HAL_RCC_OscConfig+0x8ac>)
 8001ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ece:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <HAL_RCC_OscConfig+0x8ac>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3730      	adds	r7, #48	; 0x30
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	58024400 	.word	0x58024400
 8001ee4:	ffff0007 	.word	0xffff0007

08001ee8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e19c      	b.n	8002236 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001efc:	4b8a      	ldr	r3, [pc, #552]	; (8002128 <HAL_RCC_ClockConfig+0x240>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d910      	bls.n	8001f2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0a:	4b87      	ldr	r3, [pc, #540]	; (8002128 <HAL_RCC_ClockConfig+0x240>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 020f 	bic.w	r2, r3, #15
 8001f12:	4985      	ldr	r1, [pc, #532]	; (8002128 <HAL_RCC_ClockConfig+0x240>)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1a:	4b83      	ldr	r3, [pc, #524]	; (8002128 <HAL_RCC_ClockConfig+0x240>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d001      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e184      	b.n	8002236 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d010      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	4b7b      	ldr	r3, [pc, #492]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d908      	bls.n	8001f5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f48:	4b78      	ldr	r3, [pc, #480]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	4975      	ldr	r1, [pc, #468]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d010      	beq.n	8001f88 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695a      	ldr	r2, [r3, #20]
 8001f6a:	4b70      	ldr	r3, [pc, #448]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d908      	bls.n	8001f88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f76:	4b6d      	ldr	r3, [pc, #436]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	496a      	ldr	r1, [pc, #424]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0310 	and.w	r3, r3, #16
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d010      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	699a      	ldr	r2, [r3, #24]
 8001f98:	4b64      	ldr	r3, [pc, #400]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d908      	bls.n	8001fb6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fa4:	4b61      	ldr	r3, [pc, #388]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	495e      	ldr	r1, [pc, #376]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d010      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69da      	ldr	r2, [r3, #28]
 8001fc6:	4b59      	ldr	r3, [pc, #356]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d908      	bls.n	8001fe4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001fd2:	4b56      	ldr	r3, [pc, #344]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	4953      	ldr	r1, [pc, #332]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d010      	beq.n	8002012 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	4b4d      	ldr	r3, [pc, #308]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d908      	bls.n	8002012 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002000:	4b4a      	ldr	r3, [pc, #296]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f023 020f 	bic.w	r2, r3, #15
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4947      	ldr	r1, [pc, #284]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 800200e:	4313      	orrs	r3, r2
 8002010:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d055      	beq.n	80020ca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800201e:	4b43      	ldr	r3, [pc, #268]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	4940      	ldr	r1, [pc, #256]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 800202c:	4313      	orrs	r3, r2
 800202e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d107      	bne.n	8002048 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002038:	4b3c      	ldr	r3, [pc, #240]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d121      	bne.n	8002088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0f6      	b.n	8002236 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b03      	cmp	r3, #3
 800204e:	d107      	bne.n	8002060 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002050:	4b36      	ldr	r3, [pc, #216]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d115      	bne.n	8002088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0ea      	b.n	8002236 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d107      	bne.n	8002078 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002068:	4b30      	ldr	r3, [pc, #192]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d109      	bne.n	8002088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0de      	b.n	8002236 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002078:	4b2c      	ldr	r3, [pc, #176]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0d6      	b.n	8002236 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002088:	4b28      	ldr	r3, [pc, #160]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	f023 0207 	bic.w	r2, r3, #7
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	4925      	ldr	r1, [pc, #148]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8002096:	4313      	orrs	r3, r2
 8002098:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800209a:	f7fe fe9d 	bl	8000dd8 <HAL_GetTick>
 800209e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a0:	e00a      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a2:	f7fe fe99 	bl	8000dd8 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e0be      	b.n	8002236 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b8:	4b1c      	ldr	r3, [pc, #112]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d1eb      	bne.n	80020a2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d010      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	4b14      	ldr	r3, [pc, #80]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d208      	bcs.n	80020f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e6:	4b11      	ldr	r3, [pc, #68]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	f023 020f 	bic.w	r2, r3, #15
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	490e      	ldr	r1, [pc, #56]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_RCC_ClockConfig+0x240>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d214      	bcs.n	8002130 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b08      	ldr	r3, [pc, #32]	; (8002128 <HAL_RCC_ClockConfig+0x240>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 020f 	bic.w	r2, r3, #15
 800210e:	4906      	ldr	r1, [pc, #24]	; (8002128 <HAL_RCC_ClockConfig+0x240>)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b04      	ldr	r3, [pc, #16]	; (8002128 <HAL_RCC_ClockConfig+0x240>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d005      	beq.n	8002130 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e086      	b.n	8002236 <HAL_RCC_ClockConfig+0x34e>
 8002128:	52002000 	.word	0x52002000
 800212c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b00      	cmp	r3, #0
 800213a:	d010      	beq.n	800215e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	4b3f      	ldr	r3, [pc, #252]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002148:	429a      	cmp	r2, r3
 800214a:	d208      	bcs.n	800215e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800214c:	4b3c      	ldr	r3, [pc, #240]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	4939      	ldr	r1, [pc, #228]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 800215a:	4313      	orrs	r3, r2
 800215c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d010      	beq.n	800218c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695a      	ldr	r2, [r3, #20]
 800216e:	4b34      	ldr	r3, [pc, #208]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002176:	429a      	cmp	r2, r3
 8002178:	d208      	bcs.n	800218c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800217a:	4b31      	ldr	r3, [pc, #196]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	492e      	ldr	r1, [pc, #184]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 8002188:	4313      	orrs	r3, r2
 800218a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0310 	and.w	r3, r3, #16
 8002194:	2b00      	cmp	r3, #0
 8002196:	d010      	beq.n	80021ba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699a      	ldr	r2, [r3, #24]
 800219c:	4b28      	ldr	r3, [pc, #160]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d208      	bcs.n	80021ba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021a8:	4b25      	ldr	r3, [pc, #148]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	4922      	ldr	r1, [pc, #136]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d010      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69da      	ldr	r2, [r3, #28]
 80021ca:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d208      	bcs.n	80021e8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80021d6:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	4917      	ldr	r1, [pc, #92]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021e8:	f000 f834 	bl	8002254 <HAL_RCC_GetSysClockFreq>
 80021ec:	4602      	mov	r2, r0
 80021ee:	4b14      	ldr	r3, [pc, #80]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	0a1b      	lsrs	r3, r3, #8
 80021f4:	f003 030f 	and.w	r3, r3, #15
 80021f8:	4912      	ldr	r1, [pc, #72]	; (8002244 <HAL_RCC_ClockConfig+0x35c>)
 80021fa:	5ccb      	ldrb	r3, [r1, r3]
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
 8002204:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	4a0d      	ldr	r2, [pc, #52]	; (8002244 <HAL_RCC_ClockConfig+0x35c>)
 8002210:	5cd3      	ldrb	r3, [r2, r3]
 8002212:	f003 031f 	and.w	r3, r3, #31
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	fa22 f303 	lsr.w	r3, r2, r3
 800221c:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <HAL_RCC_ClockConfig+0x360>)
 800221e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002220:	4a0a      	ldr	r2, [pc, #40]	; (800224c <HAL_RCC_ClockConfig+0x364>)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <HAL_RCC_ClockConfig+0x368>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe fd8a 	bl	8000d44 <HAL_InitTick>
 8002230:	4603      	mov	r3, r0
 8002232:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002234:	7bfb      	ldrb	r3, [r7, #15]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	58024400 	.word	0x58024400
 8002244:	08006008 	.word	0x08006008
 8002248:	24000004 	.word	0x24000004
 800224c:	24000000 	.word	0x24000000
 8002250:	24000008 	.word	0x24000008

08002254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002254:	b480      	push	{r7}
 8002256:	b089      	sub	sp, #36	; 0x24
 8002258:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800225a:	4bb3      	ldr	r3, [pc, #716]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002262:	2b18      	cmp	r3, #24
 8002264:	f200 8155 	bhi.w	8002512 <HAL_RCC_GetSysClockFreq+0x2be>
 8002268:	a201      	add	r2, pc, #4	; (adr r2, 8002270 <HAL_RCC_GetSysClockFreq+0x1c>)
 800226a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226e:	bf00      	nop
 8002270:	080022d5 	.word	0x080022d5
 8002274:	08002513 	.word	0x08002513
 8002278:	08002513 	.word	0x08002513
 800227c:	08002513 	.word	0x08002513
 8002280:	08002513 	.word	0x08002513
 8002284:	08002513 	.word	0x08002513
 8002288:	08002513 	.word	0x08002513
 800228c:	08002513 	.word	0x08002513
 8002290:	080022fb 	.word	0x080022fb
 8002294:	08002513 	.word	0x08002513
 8002298:	08002513 	.word	0x08002513
 800229c:	08002513 	.word	0x08002513
 80022a0:	08002513 	.word	0x08002513
 80022a4:	08002513 	.word	0x08002513
 80022a8:	08002513 	.word	0x08002513
 80022ac:	08002513 	.word	0x08002513
 80022b0:	08002301 	.word	0x08002301
 80022b4:	08002513 	.word	0x08002513
 80022b8:	08002513 	.word	0x08002513
 80022bc:	08002513 	.word	0x08002513
 80022c0:	08002513 	.word	0x08002513
 80022c4:	08002513 	.word	0x08002513
 80022c8:	08002513 	.word	0x08002513
 80022cc:	08002513 	.word	0x08002513
 80022d0:	08002307 	.word	0x08002307
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022d4:	4b94      	ldr	r3, [pc, #592]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d009      	beq.n	80022f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80022e0:	4b91      	ldr	r3, [pc, #580]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	08db      	lsrs	r3, r3, #3
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	4a90      	ldr	r2, [pc, #576]	; (800252c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
 80022f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80022f2:	e111      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80022f4:	4b8d      	ldr	r3, [pc, #564]	; (800252c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022f6:	61bb      	str	r3, [r7, #24]
      break;
 80022f8:	e10e      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80022fa:	4b8d      	ldr	r3, [pc, #564]	; (8002530 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80022fc:	61bb      	str	r3, [r7, #24]
      break;
 80022fe:	e10b      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002300:	4b8c      	ldr	r3, [pc, #560]	; (8002534 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002302:	61bb      	str	r3, [r7, #24]
      break;
 8002304:	e108      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002306:	4b88      	ldr	r3, [pc, #544]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002310:	4b85      	ldr	r3, [pc, #532]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800231a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800231c:	4b82      	ldr	r3, [pc, #520]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800231e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002326:	4b80      	ldr	r3, [pc, #512]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232a:	08db      	lsrs	r3, r3, #3
 800232c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	fb02 f303 	mul.w	r3, r2, r3
 8002336:	ee07 3a90 	vmov	s15, r3
 800233a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800233e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80e1 	beq.w	800250c <HAL_RCC_GetSysClockFreq+0x2b8>
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2b02      	cmp	r3, #2
 800234e:	f000 8083 	beq.w	8002458 <HAL_RCC_GetSysClockFreq+0x204>
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2b02      	cmp	r3, #2
 8002356:	f200 80a1 	bhi.w	800249c <HAL_RCC_GetSysClockFreq+0x248>
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_RCC_GetSysClockFreq+0x114>
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d056      	beq.n	8002414 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002366:	e099      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002368:	4b6f      	ldr	r3, [pc, #444]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0320 	and.w	r3, r3, #32
 8002370:	2b00      	cmp	r3, #0
 8002372:	d02d      	beq.n	80023d0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002374:	4b6c      	ldr	r3, [pc, #432]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	08db      	lsrs	r3, r3, #3
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	4a6b      	ldr	r2, [pc, #428]	; (800252c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
 8002384:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	ee07 3a90 	vmov	s15, r3
 800238c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	ee07 3a90 	vmov	s15, r3
 8002396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800239a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800239e:	4b62      	ldr	r3, [pc, #392]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a6:	ee07 3a90 	vmov	s15, r3
 80023aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80023b2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002538 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80023ce:	e087      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	ee07 3a90 	vmov	s15, r3
 80023d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023da:	eddf 6a58 	vldr	s13, [pc, #352]	; 800253c <HAL_RCC_GetSysClockFreq+0x2e8>
 80023de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023e2:	4b51      	ldr	r3, [pc, #324]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ea:	ee07 3a90 	vmov	s15, r3
 80023ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80023f6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002538 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800240a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002412:	e065      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	ee07 3a90 	vmov	s15, r3
 800241a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800241e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002540 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002426:	4b40      	ldr	r3, [pc, #256]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800242e:	ee07 3a90 	vmov	s15, r3
 8002432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002436:	ed97 6a02 	vldr	s12, [r7, #8]
 800243a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002538 <HAL_RCC_GetSysClockFreq+0x2e4>
 800243e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800244a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800244e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002452:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002456:	e043      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002462:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002544 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800246a:	4b2f      	ldr	r3, [pc, #188]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002472:	ee07 3a90 	vmov	s15, r3
 8002476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800247a:	ed97 6a02 	vldr	s12, [r7, #8]
 800247e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002538 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800248a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800248e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002496:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800249a:	e021      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002540 <HAL_RCC_GetSysClockFreq+0x2ec>
 80024aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024ae:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024b6:	ee07 3a90 	vmov	s15, r3
 80024ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024be:	ed97 6a02 	vldr	s12, [r7, #8]
 80024c2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002538 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024de:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80024e0:	4b11      	ldr	r3, [pc, #68]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	0a5b      	lsrs	r3, r3, #9
 80024e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024ea:	3301      	adds	r3, #1
 80024ec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	ee07 3a90 	vmov	s15, r3
 80024f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80024fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002504:	ee17 3a90 	vmov	r3, s15
 8002508:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800250a:	e005      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	61bb      	str	r3, [r7, #24]
      break;
 8002510:	e002      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002512:	4b07      	ldr	r3, [pc, #28]	; (8002530 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002514:	61bb      	str	r3, [r7, #24]
      break;
 8002516:	bf00      	nop
  }

  return sysclockfreq;
 8002518:	69bb      	ldr	r3, [r7, #24]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3724      	adds	r7, #36	; 0x24
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	58024400 	.word	0x58024400
 800252c:	03d09000 	.word	0x03d09000
 8002530:	003d0900 	.word	0x003d0900
 8002534:	017d7840 	.word	0x017d7840
 8002538:	46000000 	.word	0x46000000
 800253c:	4c742400 	.word	0x4c742400
 8002540:	4a742400 	.word	0x4a742400
 8002544:	4bbebc20 	.word	0x4bbebc20

08002548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800254e:	f7ff fe81 	bl	8002254 <HAL_RCC_GetSysClockFreq>
 8002552:	4602      	mov	r2, r0
 8002554:	4b10      	ldr	r3, [pc, #64]	; (8002598 <HAL_RCC_GetHCLKFreq+0x50>)
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	0a1b      	lsrs	r3, r3, #8
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	490f      	ldr	r1, [pc, #60]	; (800259c <HAL_RCC_GetHCLKFreq+0x54>)
 8002560:	5ccb      	ldrb	r3, [r1, r3]
 8002562:	f003 031f 	and.w	r3, r3, #31
 8002566:	fa22 f303 	lsr.w	r3, r2, r3
 800256a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800256c:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <HAL_RCC_GetHCLKFreq+0x50>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	4a09      	ldr	r2, [pc, #36]	; (800259c <HAL_RCC_GetHCLKFreq+0x54>)
 8002576:	5cd3      	ldrb	r3, [r2, r3]
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	fa22 f303 	lsr.w	r3, r2, r3
 8002582:	4a07      	ldr	r2, [pc, #28]	; (80025a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002584:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002586:	4a07      	ldr	r2, [pc, #28]	; (80025a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800258c:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800258e:	681b      	ldr	r3, [r3, #0]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	58024400 	.word	0x58024400
 800259c:	08006008 	.word	0x08006008
 80025a0:	24000004 	.word	0x24000004
 80025a4:	24000000 	.word	0x24000000

080025a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80025ac:	f7ff ffcc 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 80025b0:	4602      	mov	r2, r0
 80025b2:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	091b      	lsrs	r3, r3, #4
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	4904      	ldr	r1, [pc, #16]	; (80025d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025be:	5ccb      	ldrb	r3, [r1, r3]
 80025c0:	f003 031f 	and.w	r3, r3, #31
 80025c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	58024400 	.word	0x58024400
 80025d0:	08006008 	.word	0x08006008

080025d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80025d8:	f7ff ffb6 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 80025dc:	4602      	mov	r2, r0
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	0a1b      	lsrs	r3, r3, #8
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	4904      	ldr	r1, [pc, #16]	; (80025fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80025ea:	5ccb      	ldrb	r3, [r1, r3]
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	58024400 	.word	0x58024400
 80025fc:	08006008 	.word	0x08006008

08002600 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002604:	b0cc      	sub	sp, #304	; 0x130
 8002606:	af00      	add	r7, sp, #0
 8002608:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800260c:	2300      	movs	r3, #0
 800260e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002612:	2300      	movs	r3, #0
 8002614:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002618:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800261c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002620:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002624:	2500      	movs	r5, #0
 8002626:	ea54 0305 	orrs.w	r3, r4, r5
 800262a:	d049      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800262c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002632:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002636:	d02f      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002638:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800263c:	d828      	bhi.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800263e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002642:	d01a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002644:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002648:	d822      	bhi.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800264e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002652:	d007      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002654:	e01c      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002656:	4bb8      	ldr	r3, [pc, #736]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	4ab7      	ldr	r2, [pc, #732]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800265c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002660:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002662:	e01a      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002664:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002668:	3308      	adds	r3, #8
 800266a:	2102      	movs	r1, #2
 800266c:	4618      	mov	r0, r3
 800266e:	f001 fccf 	bl	8004010 <RCCEx_PLL2_Config>
 8002672:	4603      	mov	r3, r0
 8002674:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002678:	e00f      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800267a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800267e:	3328      	adds	r3, #40	; 0x28
 8002680:	2102      	movs	r1, #2
 8002682:	4618      	mov	r0, r3
 8002684:	f001 fd76 	bl	8004174 <RCCEx_PLL3_Config>
 8002688:	4603      	mov	r3, r0
 800268a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800268e:	e004      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002696:	e000      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800269a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10a      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80026a2:	4ba5      	ldr	r3, [pc, #660]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80026aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80026ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026b0:	4aa1      	ldr	r2, [pc, #644]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026b2:	430b      	orrs	r3, r1
 80026b4:	6513      	str	r3, [r2, #80]	; 0x50
 80026b6:	e003      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026b8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80026bc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80026c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80026c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80026cc:	f04f 0900 	mov.w	r9, #0
 80026d0:	ea58 0309 	orrs.w	r3, r8, r9
 80026d4:	d047      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80026d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80026da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d82a      	bhi.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80026e0:	a201      	add	r2, pc, #4	; (adr r2, 80026e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80026e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e6:	bf00      	nop
 80026e8:	080026fd 	.word	0x080026fd
 80026ec:	0800270b 	.word	0x0800270b
 80026f0:	08002721 	.word	0x08002721
 80026f4:	0800273f 	.word	0x0800273f
 80026f8:	0800273f 	.word	0x0800273f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026fc:	4b8e      	ldr	r3, [pc, #568]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	4a8d      	ldr	r2, [pc, #564]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002706:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002708:	e01a      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800270a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800270e:	3308      	adds	r3, #8
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f001 fc7c 	bl	8004010 <RCCEx_PLL2_Config>
 8002718:	4603      	mov	r3, r0
 800271a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800271e:	e00f      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002720:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002724:	3328      	adds	r3, #40	; 0x28
 8002726:	2100      	movs	r1, #0
 8002728:	4618      	mov	r0, r3
 800272a:	f001 fd23 	bl	8004174 <RCCEx_PLL3_Config>
 800272e:	4603      	mov	r3, r0
 8002730:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002734:	e004      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800273c:	e000      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800273e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002740:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10a      	bne.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002748:	4b7b      	ldr	r3, [pc, #492]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800274a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800274c:	f023 0107 	bic.w	r1, r3, #7
 8002750:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002756:	4a78      	ldr	r2, [pc, #480]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002758:	430b      	orrs	r3, r1
 800275a:	6513      	str	r3, [r2, #80]	; 0x50
 800275c:	e003      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800275e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002762:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002766:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800276a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002772:	f04f 0b00 	mov.w	fp, #0
 8002776:	ea5a 030b 	orrs.w	r3, sl, fp
 800277a:	d04c      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800277c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002786:	d030      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800278c:	d829      	bhi.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800278e:	2bc0      	cmp	r3, #192	; 0xc0
 8002790:	d02d      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002792:	2bc0      	cmp	r3, #192	; 0xc0
 8002794:	d825      	bhi.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002796:	2b80      	cmp	r3, #128	; 0x80
 8002798:	d018      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800279a:	2b80      	cmp	r3, #128	; 0x80
 800279c:	d821      	bhi.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80027a2:	2b40      	cmp	r3, #64	; 0x40
 80027a4:	d007      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80027a6:	e01c      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027a8:	4b63      	ldr	r3, [pc, #396]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ac:	4a62      	ldr	r2, [pc, #392]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80027b4:	e01c      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80027ba:	3308      	adds	r3, #8
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f001 fc26 	bl	8004010 <RCCEx_PLL2_Config>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80027ca:	e011      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80027d0:	3328      	adds	r3, #40	; 0x28
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f001 fccd 	bl	8004174 <RCCEx_PLL3_Config>
 80027da:	4603      	mov	r3, r0
 80027dc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80027e0:	e006      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80027e8:	e002      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80027ea:	bf00      	nop
 80027ec:	e000      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80027ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027f0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10a      	bne.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80027f8:	4b4f      	ldr	r3, [pc, #316]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027fc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002800:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002806:	4a4c      	ldr	r2, [pc, #304]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002808:	430b      	orrs	r3, r1
 800280a:	6513      	str	r3, [r2, #80]	; 0x50
 800280c:	e003      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800280e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002812:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002816:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800281a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002822:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002826:	2300      	movs	r3, #0
 8002828:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800282c:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8002830:	460b      	mov	r3, r1
 8002832:	4313      	orrs	r3, r2
 8002834:	d053      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002836:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800283a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800283e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002842:	d035      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002844:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002848:	d82e      	bhi.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800284a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800284e:	d031      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002850:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002854:	d828      	bhi.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002856:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800285a:	d01a      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800285c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002860:	d822      	bhi.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002866:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800286a:	d007      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800286c:	e01c      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800286e:	4b32      	ldr	r3, [pc, #200]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002872:	4a31      	ldr	r2, [pc, #196]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002878:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800287a:	e01c      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800287c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002880:	3308      	adds	r3, #8
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f001 fbc3 	bl	8004010 <RCCEx_PLL2_Config>
 800288a:	4603      	mov	r3, r0
 800288c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002890:	e011      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002892:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002896:	3328      	adds	r3, #40	; 0x28
 8002898:	2100      	movs	r1, #0
 800289a:	4618      	mov	r0, r3
 800289c:	f001 fc6a 	bl	8004174 <RCCEx_PLL3_Config>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028a6:	e006      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80028ae:	e002      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80028b0:	bf00      	nop
 80028b2:	e000      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80028b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028b6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10b      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80028be:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80028c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80028ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80028ce:	4a1a      	ldr	r2, [pc, #104]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028d0:	430b      	orrs	r3, r1
 80028d2:	6593      	str	r3, [r2, #88]	; 0x58
 80028d4:	e003      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80028da:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80028de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80028e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80028ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80028ee:	2300      	movs	r3, #0
 80028f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80028f4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80028f8:	460b      	mov	r3, r1
 80028fa:	4313      	orrs	r3, r2
 80028fc:	d056      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80028fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002902:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002906:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800290a:	d038      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800290c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002910:	d831      	bhi.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002912:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002916:	d034      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002918:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800291c:	d82b      	bhi.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800291e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002922:	d01d      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002924:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002928:	d825      	bhi.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800292a:	2b00      	cmp	r3, #0
 800292c:	d006      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800292e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002932:	d00a      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002934:	e01f      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002936:	bf00      	nop
 8002938:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800293c:	4ba2      	ldr	r3, [pc, #648]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	4aa1      	ldr	r2, [pc, #644]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002946:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002948:	e01c      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800294a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800294e:	3308      	adds	r3, #8
 8002950:	2100      	movs	r1, #0
 8002952:	4618      	mov	r0, r3
 8002954:	f001 fb5c 	bl	8004010 <RCCEx_PLL2_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800295e:	e011      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002960:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002964:	3328      	adds	r3, #40	; 0x28
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f001 fc03 	bl	8004174 <RCCEx_PLL3_Config>
 800296e:	4603      	mov	r3, r0
 8002970:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002974:	e006      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800297c:	e002      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800297e:	bf00      	nop
 8002980:	e000      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002982:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002984:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10b      	bne.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800298c:	4b8e      	ldr	r3, [pc, #568]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800298e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002990:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002994:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002998:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800299c:	4a8a      	ldr	r2, [pc, #552]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800299e:	430b      	orrs	r3, r1
 80029a0:	6593      	str	r3, [r2, #88]	; 0x58
 80029a2:	e003      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80029a8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80029ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80029b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80029bc:	2300      	movs	r3, #0
 80029be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80029c2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80029c6:	460b      	mov	r3, r1
 80029c8:	4313      	orrs	r3, r2
 80029ca:	d03a      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80029cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d2:	2b30      	cmp	r3, #48	; 0x30
 80029d4:	d01f      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80029d6:	2b30      	cmp	r3, #48	; 0x30
 80029d8:	d819      	bhi.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80029da:	2b20      	cmp	r3, #32
 80029dc:	d00c      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80029de:	2b20      	cmp	r3, #32
 80029e0:	d815      	bhi.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d019      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80029e6:	2b10      	cmp	r3, #16
 80029e8:	d111      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029ea:	4b77      	ldr	r3, [pc, #476]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ee:	4a76      	ldr	r2, [pc, #472]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80029f6:	e011      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80029f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029fc:	3308      	adds	r3, #8
 80029fe:	2102      	movs	r1, #2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f001 fb05 	bl	8004010 <RCCEx_PLL2_Config>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002a0c:	e006      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002a14:	e002      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002a16:	bf00      	nop
 8002a18:	e000      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002a1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a1c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10a      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a24:	4b68      	ldr	r3, [pc, #416]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a28:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002a2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a32:	4a65      	ldr	r2, [pc, #404]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a34:	430b      	orrs	r3, r1
 8002a36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a38:	e003      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a3a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002a3e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002a42:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002a4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002a52:	2300      	movs	r3, #0
 8002a54:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002a58:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	d051      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002a62:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a6c:	d035      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002a6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a72:	d82e      	bhi.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a78:	d031      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002a7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a7e:	d828      	bhi.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a84:	d01a      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a8a:	d822      	bhi.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a94:	d007      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002a96:	e01c      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a98:	4b4b      	ldr	r3, [pc, #300]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	4a4a      	ldr	r2, [pc, #296]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002aa4:	e01c      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002aa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002aaa:	3308      	adds	r3, #8
 8002aac:	2100      	movs	r1, #0
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f001 faae 	bl	8004010 <RCCEx_PLL2_Config>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002aba:	e011      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002abc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ac0:	3328      	adds	r3, #40	; 0x28
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f001 fb55 	bl	8004174 <RCCEx_PLL3_Config>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ad0:	e006      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002ad8:	e002      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002ada:	bf00      	nop
 8002adc:	e000      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002ade:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ae0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10a      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ae8:	4b37      	ldr	r3, [pc, #220]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aec:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002af0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002af4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002af6:	4a34      	ldr	r2, [pc, #208]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002af8:	430b      	orrs	r3, r1
 8002afa:	6513      	str	r3, [r2, #80]	; 0x50
 8002afc:	e003      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002afe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002b02:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002b06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002b12:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002b16:	2300      	movs	r3, #0
 8002b18:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002b1c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4313      	orrs	r3, r2
 8002b24:	d056      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002b26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b30:	d033      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002b32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b36:	d82c      	bhi.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b3c:	d02f      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002b3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b42:	d826      	bhi.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b44:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b48:	d02b      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002b4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b4e:	d820      	bhi.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b54:	d012      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002b56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b5a:	d81a      	bhi.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d022      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b64:	d115      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b6a:	3308      	adds	r3, #8
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f001 fa4e 	bl	8004010 <RCCEx_PLL2_Config>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b7a:	e015      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b80:	3328      	adds	r3, #40	; 0x28
 8002b82:	2101      	movs	r1, #1
 8002b84:	4618      	mov	r0, r3
 8002b86:	f001 faf5 	bl	8004174 <RCCEx_PLL3_Config>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b90:	e00a      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002b98:	e006      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b9a:	bf00      	nop
 8002b9c:	e004      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b9e:	bf00      	nop
 8002ba0:	e002      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002ba2:	bf00      	nop
 8002ba4:	e000      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002ba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ba8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10d      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002bb0:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002bb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bbe:	4a02      	ldr	r2, [pc, #8]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bc0:	430b      	orrs	r3, r1
 8002bc2:	6513      	str	r3, [r2, #80]	; 0x50
 8002bc4:	e006      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002bc6:	bf00      	nop
 8002bc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bcc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002bd0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002bd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bdc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002be0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002be4:	2300      	movs	r3, #0
 8002be6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002bea:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	d055      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002bf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bf8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c00:	d033      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002c02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c06:	d82c      	bhi.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0c:	d02f      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c12:	d826      	bhi.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002c14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c18:	d02b      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002c1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c1e:	d820      	bhi.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002c20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c24:	d012      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002c26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c2a:	d81a      	bhi.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d022      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002c30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c34:	d115      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c3a:	3308      	adds	r3, #8
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f001 f9e6 	bl	8004010 <RCCEx_PLL2_Config>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002c4a:	e015      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c50:	3328      	adds	r3, #40	; 0x28
 8002c52:	2101      	movs	r1, #1
 8002c54:	4618      	mov	r0, r3
 8002c56:	f001 fa8d 	bl	8004174 <RCCEx_PLL3_Config>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002c60:	e00a      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002c68:	e006      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c6a:	bf00      	nop
 8002c6c:	e004      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c6e:	bf00      	nop
 8002c70:	e002      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c72:	bf00      	nop
 8002c74:	e000      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c78:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10b      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002c80:	4bb6      	ldr	r3, [pc, #728]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c84:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002c88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c8c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c90:	4ab2      	ldr	r2, [pc, #712]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c92:	430b      	orrs	r3, r1
 8002c94:	6593      	str	r3, [r2, #88]	; 0x58
 8002c96:	e003      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c98:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002c9c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002ca0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca8:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8002cac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002cb6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	d02a      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8002cc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d011      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cce:	d10a      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cd4:	3308      	adds	r3, #8
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f001 f999 	bl	8004010 <RCCEx_PLL2_Config>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8002ce4:	e004      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002cec:	e000      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8002cee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cf0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10a      	bne.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002cf8:	4b98      	ldr	r3, [pc, #608]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8002d00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d06:	4a95      	ldr	r2, [pc, #596]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d08:	430b      	orrs	r3, r1
 8002d0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d0c:	e003      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d0e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002d12:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002d22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d26:	2300      	movs	r3, #0
 8002d28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002d2c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d30:	460b      	mov	r3, r1
 8002d32:	4313      	orrs	r3, r2
 8002d34:	d037      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002d36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d40:	d00e      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8002d42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d46:	d816      	bhi.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d018      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002d4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d50:	d111      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d52:	4b82      	ldr	r3, [pc, #520]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d56:	4a81      	ldr	r2, [pc, #516]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002d5e:	e00f      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d64:	3308      	adds	r3, #8
 8002d66:	2101      	movs	r1, #1
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f001 f951 	bl	8004010 <RCCEx_PLL2_Config>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002d74:	e004      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002d7c:	e000      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8002d7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d80:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10a      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d88:	4b74      	ldr	r3, [pc, #464]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d8c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002d90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d96:	4a71      	ldr	r2, [pc, #452]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	6513      	str	r3, [r2, #80]	; 0x50
 8002d9c:	e003      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d9e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002da2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002da6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dae:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002db2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002db6:	2300      	movs	r3, #0
 8002db8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002dbc:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	d03a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002dc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d81d      	bhi.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8002dd0:	a201      	add	r2, pc, #4	; (adr r2, 8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd6:	bf00      	nop
 8002dd8:	08002e15 	.word	0x08002e15
 8002ddc:	08002de9 	.word	0x08002de9
 8002de0:	08002df7 	.word	0x08002df7
 8002de4:	08002e15 	.word	0x08002e15
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002de8:	4b5c      	ldr	r3, [pc, #368]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dec:	4a5b      	ldr	r2, [pc, #364]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002df4:	e00f      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002df6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002dfa:	3308      	adds	r3, #8
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f001 f906 	bl	8004010 <RCCEx_PLL2_Config>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e0a:	e004      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002e12:	e000      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8002e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e16:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10a      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002e1e:	4b4f      	ldr	r3, [pc, #316]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e22:	f023 0103 	bic.w	r1, r3, #3
 8002e26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e2c:	4a4b      	ldr	r2, [pc, #300]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e2e:	430b      	orrs	r3, r1
 8002e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e32:	e003      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e34:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002e38:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e44:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002e48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e52:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002e56:	460b      	mov	r3, r1
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f000 80a0 	beq.w	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e5e:	4b40      	ldr	r3, [pc, #256]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a3f      	ldr	r2, [pc, #252]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e6a:	f7fd ffb5 	bl	8000dd8 <HAL_GetTick>
 8002e6e:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e72:	e00b      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e74:	f7fd ffb0 	bl	8000dd8 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b64      	cmp	r3, #100	; 0x64
 8002e82:	d903      	bls.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002e8a:	e005      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e8c:	4b34      	ldr	r3, [pc, #208]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0ed      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8002e98:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d17a      	bne.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002ea0:	4b2e      	ldr	r3, [pc, #184]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ea2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ea4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ea8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002eac:	4053      	eors	r3, r2
 8002eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d015      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002eb6:	4b29      	ldr	r3, [pc, #164]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ebe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ec2:	4b26      	ldr	r3, [pc, #152]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec6:	4a25      	ldr	r2, [pc, #148]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ecc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ece:	4b23      	ldr	r3, [pc, #140]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed2:	4a22      	ldr	r2, [pc, #136]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002eda:	4a20      	ldr	r2, [pc, #128]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002edc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002ee0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002ee2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ee6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eee:	d118      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7fd ff72 	bl	8000dd8 <HAL_GetTick>
 8002ef4:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ef8:	e00d      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efa:	f7fd ff6d 	bl	8000dd8 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002f04:	1ad2      	subs	r2, r2, r3
 8002f06:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d903      	bls.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8002f14:	e005      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f16:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0eb      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8002f22:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d130      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f2e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f3a:	d115      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8002f3c:	4b07      	ldr	r3, [pc, #28]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002f44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002f4c:	091a      	lsrs	r2, r3, #4
 8002f4e:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	4a02      	ldr	r2, [pc, #8]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002f54:	430b      	orrs	r3, r1
 8002f56:	6113      	str	r3, [r2, #16]
 8002f58:	e00c      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8002f5a:	bf00      	nop
 8002f5c:	58024400 	.word	0x58024400
 8002f60:	58024800 	.word	0x58024800
 8002f64:	00ffffcf 	.word	0x00ffffcf
 8002f68:	4bd4      	ldr	r3, [pc, #848]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	4ad3      	ldr	r2, [pc, #844]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002f6e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f72:	6113      	str	r3, [r2, #16]
 8002f74:	4bd1      	ldr	r3, [pc, #836]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002f76:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002f78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f7c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f84:	4acd      	ldr	r2, [pc, #820]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002f86:	430b      	orrs	r3, r1
 8002f88:	6713      	str	r3, [r2, #112]	; 0x70
 8002f8a:	e008      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f8c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002f90:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8002f94:	e003      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f96:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002f9a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002f9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa6:	f002 0301 	and.w	r3, r2, #1
 8002faa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002fb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f000 808b 	beq.w	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002fc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fc8:	2b28      	cmp	r3, #40	; 0x28
 8002fca:	d86b      	bhi.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002fcc:	a201      	add	r2, pc, #4	; (adr r2, 8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8002fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd2:	bf00      	nop
 8002fd4:	080030ad 	.word	0x080030ad
 8002fd8:	080030a5 	.word	0x080030a5
 8002fdc:	080030a5 	.word	0x080030a5
 8002fe0:	080030a5 	.word	0x080030a5
 8002fe4:	080030a5 	.word	0x080030a5
 8002fe8:	080030a5 	.word	0x080030a5
 8002fec:	080030a5 	.word	0x080030a5
 8002ff0:	080030a5 	.word	0x080030a5
 8002ff4:	08003079 	.word	0x08003079
 8002ff8:	080030a5 	.word	0x080030a5
 8002ffc:	080030a5 	.word	0x080030a5
 8003000:	080030a5 	.word	0x080030a5
 8003004:	080030a5 	.word	0x080030a5
 8003008:	080030a5 	.word	0x080030a5
 800300c:	080030a5 	.word	0x080030a5
 8003010:	080030a5 	.word	0x080030a5
 8003014:	0800308f 	.word	0x0800308f
 8003018:	080030a5 	.word	0x080030a5
 800301c:	080030a5 	.word	0x080030a5
 8003020:	080030a5 	.word	0x080030a5
 8003024:	080030a5 	.word	0x080030a5
 8003028:	080030a5 	.word	0x080030a5
 800302c:	080030a5 	.word	0x080030a5
 8003030:	080030a5 	.word	0x080030a5
 8003034:	080030ad 	.word	0x080030ad
 8003038:	080030a5 	.word	0x080030a5
 800303c:	080030a5 	.word	0x080030a5
 8003040:	080030a5 	.word	0x080030a5
 8003044:	080030a5 	.word	0x080030a5
 8003048:	080030a5 	.word	0x080030a5
 800304c:	080030a5 	.word	0x080030a5
 8003050:	080030a5 	.word	0x080030a5
 8003054:	080030ad 	.word	0x080030ad
 8003058:	080030a5 	.word	0x080030a5
 800305c:	080030a5 	.word	0x080030a5
 8003060:	080030a5 	.word	0x080030a5
 8003064:	080030a5 	.word	0x080030a5
 8003068:	080030a5 	.word	0x080030a5
 800306c:	080030a5 	.word	0x080030a5
 8003070:	080030a5 	.word	0x080030a5
 8003074:	080030ad 	.word	0x080030ad
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003078:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800307c:	3308      	adds	r3, #8
 800307e:	2101      	movs	r1, #1
 8003080:	4618      	mov	r0, r3
 8003082:	f000 ffc5 	bl	8004010 <RCCEx_PLL2_Config>
 8003086:	4603      	mov	r3, r0
 8003088:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800308c:	e00f      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800308e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003092:	3328      	adds	r3, #40	; 0x28
 8003094:	2101      	movs	r1, #1
 8003096:	4618      	mov	r0, r3
 8003098:	f001 f86c 	bl	8004174 <RCCEx_PLL3_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80030a2:	e004      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80030aa:	e000      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80030ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10b      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80030b6:	4b81      	ldr	r3, [pc, #516]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80030b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ba:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80030be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030c6:	4a7d      	ldr	r2, [pc, #500]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80030c8:	430b      	orrs	r3, r1
 80030ca:	6553      	str	r3, [r2, #84]	; 0x54
 80030cc:	e003      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80030d2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80030d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030de:	f002 0302 	and.w	r3, r2, #2
 80030e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030e6:	2300      	movs	r3, #0
 80030e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80030ec:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80030f0:	460b      	mov	r3, r1
 80030f2:	4313      	orrs	r3, r2
 80030f4:	d042      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80030f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030fc:	2b05      	cmp	r3, #5
 80030fe:	d825      	bhi.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8003100:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8003102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003106:	bf00      	nop
 8003108:	08003155 	.word	0x08003155
 800310c:	08003121 	.word	0x08003121
 8003110:	08003137 	.word	0x08003137
 8003114:	08003155 	.word	0x08003155
 8003118:	08003155 	.word	0x08003155
 800311c:	08003155 	.word	0x08003155
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003120:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003124:	3308      	adds	r3, #8
 8003126:	2101      	movs	r1, #1
 8003128:	4618      	mov	r0, r3
 800312a:	f000 ff71 	bl	8004010 <RCCEx_PLL2_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003134:	e00f      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003136:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800313a:	3328      	adds	r3, #40	; 0x28
 800313c:	2101      	movs	r1, #1
 800313e:	4618      	mov	r0, r3
 8003140:	f001 f818 	bl	8004174 <RCCEx_PLL3_Config>
 8003144:	4603      	mov	r3, r0
 8003146:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800314a:	e004      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003152:	e000      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8003154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003156:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10a      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800315e:	4b57      	ldr	r3, [pc, #348]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003162:	f023 0107 	bic.w	r1, r3, #7
 8003166:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800316a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800316c:	4a53      	ldr	r2, [pc, #332]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800316e:	430b      	orrs	r3, r1
 8003170:	6553      	str	r3, [r2, #84]	; 0x54
 8003172:	e003      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003174:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003178:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800317c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003184:	f002 0304 	and.w	r3, r2, #4
 8003188:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800318c:	2300      	movs	r3, #0
 800318e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003192:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003196:	460b      	mov	r3, r1
 8003198:	4313      	orrs	r3, r2
 800319a:	d044      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800319c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031a4:	2b05      	cmp	r3, #5
 80031a6:	d825      	bhi.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80031a8:	a201      	add	r2, pc, #4	; (adr r2, 80031b0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80031aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ae:	bf00      	nop
 80031b0:	080031fd 	.word	0x080031fd
 80031b4:	080031c9 	.word	0x080031c9
 80031b8:	080031df 	.word	0x080031df
 80031bc:	080031fd 	.word	0x080031fd
 80031c0:	080031fd 	.word	0x080031fd
 80031c4:	080031fd 	.word	0x080031fd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031cc:	3308      	adds	r3, #8
 80031ce:	2101      	movs	r1, #1
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 ff1d 	bl	8004010 <RCCEx_PLL2_Config>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80031dc:	e00f      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031e2:	3328      	adds	r3, #40	; 0x28
 80031e4:	2101      	movs	r1, #1
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 ffc4 	bl	8004174 <RCCEx_PLL3_Config>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80031f2:	e004      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80031fa:	e000      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 80031fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031fe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10b      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003206:	4b2d      	ldr	r3, [pc, #180]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320a:	f023 0107 	bic.w	r1, r3, #7
 800320e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003212:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003216:	4a29      	ldr	r2, [pc, #164]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003218:	430b      	orrs	r3, r1
 800321a:	6593      	str	r3, [r2, #88]	; 0x58
 800321c:	e003      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800321e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003222:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003226:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800322a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322e:	f002 0320 	and.w	r3, r2, #32
 8003232:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003236:	2300      	movs	r3, #0
 8003238:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800323c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003240:	460b      	mov	r3, r1
 8003242:	4313      	orrs	r3, r2
 8003244:	d057      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003246:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800324a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800324e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003252:	d035      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8003254:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003258:	d82c      	bhi.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800325a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325e:	d031      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8003260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003264:	d826      	bhi.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003266:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800326a:	d02d      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 800326c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003270:	d820      	bhi.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003272:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003276:	d012      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8003278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800327c:	d81a      	bhi.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800327e:	2b00      	cmp	r3, #0
 8003280:	d024      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8003282:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003286:	d115      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003288:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800328c:	3308      	adds	r3, #8
 800328e:	2100      	movs	r1, #0
 8003290:	4618      	mov	r0, r3
 8003292:	f000 febd 	bl	8004010 <RCCEx_PLL2_Config>
 8003296:	4603      	mov	r3, r0
 8003298:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800329c:	e017      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800329e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032a2:	3328      	adds	r3, #40	; 0x28
 80032a4:	2102      	movs	r1, #2
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 ff64 	bl	8004174 <RCCEx_PLL3_Config>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80032b2:	e00c      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80032ba:	e008      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80032bc:	58024400 	.word	0x58024400
        break;
 80032c0:	bf00      	nop
 80032c2:	e004      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80032c4:	bf00      	nop
 80032c6:	e002      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80032c8:	bf00      	nop
 80032ca:	e000      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80032cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10b      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032d6:	4bc2      	ldr	r3, [pc, #776]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032da:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80032de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e6:	4abe      	ldr	r2, [pc, #760]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032e8:	430b      	orrs	r3, r1
 80032ea:	6553      	str	r3, [r2, #84]	; 0x54
 80032ec:	e003      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80032f2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80032f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003306:	2300      	movs	r3, #0
 8003308:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800330c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003310:	460b      	mov	r3, r1
 8003312:	4313      	orrs	r3, r2
 8003314:	d055      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003316:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800331a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800331e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003322:	d033      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8003324:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003328:	d82c      	bhi.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800332a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332e:	d02f      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8003330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003334:	d826      	bhi.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003336:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800333a:	d02b      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 800333c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003340:	d820      	bhi.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003346:	d012      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8003348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800334c:	d81a      	bhi.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800334e:	2b00      	cmp	r3, #0
 8003350:	d022      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8003352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003356:	d115      	bne.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003358:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800335c:	3308      	adds	r3, #8
 800335e:	2100      	movs	r1, #0
 8003360:	4618      	mov	r0, r3
 8003362:	f000 fe55 	bl	8004010 <RCCEx_PLL2_Config>
 8003366:	4603      	mov	r3, r0
 8003368:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800336c:	e015      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800336e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003372:	3328      	adds	r3, #40	; 0x28
 8003374:	2102      	movs	r1, #2
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fefc 	bl	8004174 <RCCEx_PLL3_Config>
 800337c:	4603      	mov	r3, r0
 800337e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003382:	e00a      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800338a:	e006      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800338c:	bf00      	nop
 800338e:	e004      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003390:	bf00      	nop
 8003392:	e002      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003394:	bf00      	nop
 8003396:	e000      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003398:	bf00      	nop
    }

    if (ret == HAL_OK)
 800339a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10b      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033a2:	4b8f      	ldr	r3, [pc, #572]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80033aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80033b2:	4a8b      	ldr	r2, [pc, #556]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033b4:	430b      	orrs	r3, r1
 80033b6:	6593      	str	r3, [r2, #88]	; 0x58
 80033b8:	e003      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80033be:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80033c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ca:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80033ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033d2:	2300      	movs	r3, #0
 80033d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033d8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80033dc:	460b      	mov	r3, r1
 80033de:	4313      	orrs	r3, r2
 80033e0:	d055      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80033e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80033ea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80033ee:	d033      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80033f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80033f4:	d82c      	bhi.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80033f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033fa:	d02f      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80033fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003400:	d826      	bhi.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003402:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003406:	d02b      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003408:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800340c:	d820      	bhi.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800340e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003412:	d012      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8003414:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003418:	d81a      	bhi.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800341a:	2b00      	cmp	r3, #0
 800341c:	d022      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 800341e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003422:	d115      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003424:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003428:	3308      	adds	r3, #8
 800342a:	2100      	movs	r1, #0
 800342c:	4618      	mov	r0, r3
 800342e:	f000 fdef 	bl	8004010 <RCCEx_PLL2_Config>
 8003432:	4603      	mov	r3, r0
 8003434:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003438:	e015      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800343a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800343e:	3328      	adds	r3, #40	; 0x28
 8003440:	2102      	movs	r1, #2
 8003442:	4618      	mov	r0, r3
 8003444:	f000 fe96 	bl	8004174 <RCCEx_PLL3_Config>
 8003448:	4603      	mov	r3, r0
 800344a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800344e:	e00a      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003456:	e006      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003458:	bf00      	nop
 800345a:	e004      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800345c:	bf00      	nop
 800345e:	e002      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003460:	bf00      	nop
 8003462:	e000      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003466:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10b      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800346e:	4b5c      	ldr	r3, [pc, #368]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003472:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003476:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800347a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800347e:	4a58      	ldr	r2, [pc, #352]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003480:	430b      	orrs	r3, r1
 8003482:	6593      	str	r3, [r2, #88]	; 0x58
 8003484:	e003      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003486:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800348a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800348e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003496:	f002 0308 	and.w	r3, r2, #8
 800349a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800349e:	2300      	movs	r3, #0
 80034a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80034a4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80034a8:	460b      	mov	r3, r1
 80034aa:	4313      	orrs	r3, r2
 80034ac:	d01e      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80034ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ba:	d10c      	bne.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80034bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034c0:	3328      	adds	r3, #40	; 0x28
 80034c2:	2102      	movs	r1, #2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 fe55 	bl	8004174 <RCCEx_PLL3_Config>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80034d6:	4b42      	ldr	r3, [pc, #264]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e6:	4a3e      	ldr	r2, [pc, #248]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034e8:	430b      	orrs	r3, r1
 80034ea:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f4:	f002 0310 	and.w	r3, r2, #16
 80034f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034fc:	2300      	movs	r3, #0
 80034fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003502:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003506:	460b      	mov	r3, r1
 8003508:	4313      	orrs	r3, r2
 800350a:	d01e      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800350c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003510:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003518:	d10c      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800351a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800351e:	3328      	adds	r3, #40	; 0x28
 8003520:	2102      	movs	r1, #2
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fe26 	bl	8004174 <RCCEx_PLL3_Config>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003534:	4b2a      	ldr	r3, [pc, #168]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003538:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800353c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003540:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003544:	4a26      	ldr	r2, [pc, #152]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003546:	430b      	orrs	r3, r1
 8003548:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800354a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800354e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003552:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003556:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800355a:	2300      	movs	r3, #0
 800355c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003560:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003564:	460b      	mov	r3, r1
 8003566:	4313      	orrs	r3, r2
 8003568:	d040      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800356a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800356e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003572:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003576:	d022      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8003578:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800357c:	d81b      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8003582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003586:	d00b      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8003588:	e015      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800358a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800358e:	3308      	adds	r3, #8
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f000 fd3c 	bl	8004010 <RCCEx_PLL2_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800359e:	e00f      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035a4:	3328      	adds	r3, #40	; 0x28
 80035a6:	2102      	movs	r1, #2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fde3 	bl	8004174 <RCCEx_PLL3_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80035b4:	e004      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80035bc:	e000      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80035be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035c0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10d      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035c8:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035cc:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80035d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80035d8:	4a01      	ldr	r2, [pc, #4]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035da:	430b      	orrs	r3, r1
 80035dc:	6593      	str	r3, [r2, #88]	; 0x58
 80035de:	e005      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80035e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80035e8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f4:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80035f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80035fa:	2300      	movs	r3, #0
 80035fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80035fe:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003602:	460b      	mov	r3, r1
 8003604:	4313      	orrs	r3, r2
 8003606:	d03b      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003608:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800360c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003610:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003614:	d01f      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8003616:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800361a:	d818      	bhi.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 800361c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003620:	d003      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8003622:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003626:	d007      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8003628:	e011      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800362a:	4b64      	ldr	r3, [pc, #400]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	4a63      	ldr	r2, [pc, #396]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003634:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003636:	e00f      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003638:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800363c:	3328      	adds	r3, #40	; 0x28
 800363e:	2101      	movs	r1, #1
 8003640:	4618      	mov	r0, r3
 8003642:	f000 fd97 	bl	8004174 <RCCEx_PLL3_Config>
 8003646:	4603      	mov	r3, r0
 8003648:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 800364c:	e004      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003654:	e000      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8003656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003658:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10b      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003660:	4b56      	ldr	r3, [pc, #344]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003664:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003668:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800366c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003670:	4a52      	ldr	r2, [pc, #328]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003672:	430b      	orrs	r3, r1
 8003674:	6553      	str	r3, [r2, #84]	; 0x54
 8003676:	e003      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003678:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800367c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003680:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003688:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800368c:	673b      	str	r3, [r7, #112]	; 0x70
 800368e:	2300      	movs	r3, #0
 8003690:	677b      	str	r3, [r7, #116]	; 0x74
 8003692:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003696:	460b      	mov	r3, r1
 8003698:	4313      	orrs	r3, r2
 800369a:	d031      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800369c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80036a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036aa:	d007      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80036ac:	e011      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ae:	4b43      	ldr	r3, [pc, #268]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	4a42      	ldr	r2, [pc, #264]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80036b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80036ba:	e00e      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036c0:	3308      	adds	r3, #8
 80036c2:	2102      	movs	r1, #2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fca3 	bl	8004010 <RCCEx_PLL2_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80036d0:	e003      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80036d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036da:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10a      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80036e2:	4b36      	ldr	r3, [pc, #216]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80036e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f0:	4a32      	ldr	r2, [pc, #200]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80036f2:	430b      	orrs	r3, r1
 80036f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036f6:	e003      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80036fc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003700:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003708:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800370c:	66bb      	str	r3, [r7, #104]	; 0x68
 800370e:	2300      	movs	r3, #0
 8003710:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003712:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003716:	460b      	mov	r3, r1
 8003718:	4313      	orrs	r3, r2
 800371a:	d00c      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800371c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003720:	3328      	adds	r3, #40	; 0x28
 8003722:	2102      	movs	r1, #2
 8003724:	4618      	mov	r0, r3
 8003726:	f000 fd25 	bl	8004174 <RCCEx_PLL3_Config>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003736:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800373a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003742:	663b      	str	r3, [r7, #96]	; 0x60
 8003744:	2300      	movs	r3, #0
 8003746:	667b      	str	r3, [r7, #100]	; 0x64
 8003748:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800374c:	460b      	mov	r3, r1
 800374e:	4313      	orrs	r3, r2
 8003750:	d03a      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003752:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800375a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800375e:	d018      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8003760:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003764:	d811      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003766:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800376a:	d014      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 800376c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003770:	d80b      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003772:	2b00      	cmp	r3, #0
 8003774:	d011      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8003776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800377a:	d106      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800377c:	4b0f      	ldr	r3, [pc, #60]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	4a0e      	ldr	r2, [pc, #56]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003786:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003788:	e008      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003790:	e004      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003792:	bf00      	nop
 8003794:	e002      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003796:	bf00      	nop
 8003798:	e000      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800379a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800379c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10d      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037a4:	4b05      	ldr	r3, [pc, #20]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80037a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037b4:	4a01      	ldr	r2, [pc, #4]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80037b6:	430b      	orrs	r3, r1
 80037b8:	6553      	str	r3, [r2, #84]	; 0x54
 80037ba:	e005      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80037bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80037c4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80037d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80037d6:	2300      	movs	r3, #0
 80037d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80037de:	460b      	mov	r3, r1
 80037e0:	4313      	orrs	r3, r2
 80037e2:	d009      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037e4:	4baa      	ldr	r3, [pc, #680]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80037e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80037ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037f2:	4aa7      	ldr	r2, [pc, #668]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80037f4:	430b      	orrs	r3, r1
 80037f6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80037f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003800:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003804:	653b      	str	r3, [r7, #80]	; 0x50
 8003806:	2300      	movs	r3, #0
 8003808:	657b      	str	r3, [r7, #84]	; 0x54
 800380a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800380e:	460b      	mov	r3, r1
 8003810:	4313      	orrs	r3, r2
 8003812:	d00a      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003814:	4b9e      	ldr	r3, [pc, #632]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800381c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003820:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003824:	4a9a      	ldr	r2, [pc, #616]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003826:	430b      	orrs	r3, r1
 8003828:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800382a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800382e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003832:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003836:	64bb      	str	r3, [r7, #72]	; 0x48
 8003838:	2300      	movs	r3, #0
 800383a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800383c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003840:	460b      	mov	r3, r1
 8003842:	4313      	orrs	r3, r2
 8003844:	d009      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003846:	4b92      	ldr	r3, [pc, #584]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800384e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003854:	4a8e      	ldr	r2, [pc, #568]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003856:	430b      	orrs	r3, r1
 8003858:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800385a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800385e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003862:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003866:	643b      	str	r3, [r7, #64]	; 0x40
 8003868:	2300      	movs	r3, #0
 800386a:	647b      	str	r3, [r7, #68]	; 0x44
 800386c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003870:	460b      	mov	r3, r1
 8003872:	4313      	orrs	r3, r2
 8003874:	d00e      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003876:	4b86      	ldr	r3, [pc, #536]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	4a85      	ldr	r2, [pc, #532]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800387c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003880:	6113      	str	r3, [r2, #16]
 8003882:	4b83      	ldr	r3, [pc, #524]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003884:	6919      	ldr	r1, [r3, #16]
 8003886:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800388a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800388e:	4a80      	ldr	r2, [pc, #512]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003890:	430b      	orrs	r3, r1
 8003892:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003894:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80038a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80038a2:	2300      	movs	r3, #0
 80038a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80038aa:	460b      	mov	r3, r1
 80038ac:	4313      	orrs	r3, r2
 80038ae:	d009      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80038b0:	4b77      	ldr	r3, [pc, #476]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80038b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80038b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038be:	4a74      	ldr	r2, [pc, #464]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80038c0:	430b      	orrs	r3, r1
 80038c2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038cc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80038d0:	633b      	str	r3, [r7, #48]	; 0x30
 80038d2:	2300      	movs	r3, #0
 80038d4:	637b      	str	r3, [r7, #52]	; 0x34
 80038d6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80038da:	460b      	mov	r3, r1
 80038dc:	4313      	orrs	r3, r2
 80038de:	d00a      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038e0:	4b6b      	ldr	r3, [pc, #428]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80038e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80038e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f0:	4a67      	ldr	r2, [pc, #412]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80038f2:	430b      	orrs	r3, r1
 80038f4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80038f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fe:	2100      	movs	r1, #0
 8003900:	62b9      	str	r1, [r7, #40]	; 0x28
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003908:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800390c:	460b      	mov	r3, r1
 800390e:	4313      	orrs	r3, r2
 8003910:	d011      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003912:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003916:	3308      	adds	r3, #8
 8003918:	2100      	movs	r1, #0
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fb78 	bl	8004010 <RCCEx_PLL2_Config>
 8003920:	4603      	mov	r3, r0
 8003922:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003926:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003932:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003936:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800393a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393e:	2100      	movs	r1, #0
 8003940:	6239      	str	r1, [r7, #32]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	627b      	str	r3, [r7, #36]	; 0x24
 8003948:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800394c:	460b      	mov	r3, r1
 800394e:	4313      	orrs	r3, r2
 8003950:	d011      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003952:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003956:	3308      	adds	r3, #8
 8003958:	2101      	movs	r1, #1
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fb58 	bl	8004010 <RCCEx_PLL2_Config>
 8003960:	4603      	mov	r3, r0
 8003962:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003966:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003972:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003976:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397e:	2100      	movs	r1, #0
 8003980:	61b9      	str	r1, [r7, #24]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	61fb      	str	r3, [r7, #28]
 8003988:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800398c:	460b      	mov	r3, r1
 800398e:	4313      	orrs	r3, r2
 8003990:	d011      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003992:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003996:	3308      	adds	r3, #8
 8003998:	2102      	movs	r1, #2
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fb38 	bl	8004010 <RCCEx_PLL2_Config>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80039a6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80039b2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80039b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80039ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039be:	2100      	movs	r1, #0
 80039c0:	6139      	str	r1, [r7, #16]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80039cc:	460b      	mov	r3, r1
 80039ce:	4313      	orrs	r3, r2
 80039d0:	d011      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80039d6:	3328      	adds	r3, #40	; 0x28
 80039d8:	2100      	movs	r1, #0
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fbca 	bl	8004174 <RCCEx_PLL3_Config>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 80039e6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80039f2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80039f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80039fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fe:	2100      	movs	r1, #0
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	f003 0310 	and.w	r3, r3, #16
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	d011      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a16:	3328      	adds	r3, #40	; 0x28
 8003a18:	2101      	movs	r1, #1
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fbaa 	bl	8004174 <RCCEx_PLL3_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003a26:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003a32:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003a36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3e:	2100      	movs	r1, #0
 8003a40:	6039      	str	r1, [r7, #0]
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	607b      	str	r3, [r7, #4]
 8003a48:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	d011      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a56:	3328      	adds	r3, #40	; 0x28
 8003a58:	2102      	movs	r1, #2
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fb8a 	bl	8004174 <RCCEx_PLL3_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003a66:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a6e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003a72:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 8003a76:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	e000      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a90:	58024400 	.word	0x58024400

08003a94 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003a98:	f7fe fd56 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	091b      	lsrs	r3, r3, #4
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	4904      	ldr	r1, [pc, #16]	; (8003abc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003aaa:	5ccb      	ldrb	r3, [r1, r3]
 8003aac:	f003 031f 	and.w	r3, r3, #31
 8003ab0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	58024400 	.word	0x58024400
 8003abc:	08006008 	.word	0x08006008

08003ac0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b089      	sub	sp, #36	; 0x24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ac8:	4ba1      	ldr	r3, [pc, #644]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003ad2:	4b9f      	ldr	r3, [pc, #636]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad6:	0b1b      	lsrs	r3, r3, #12
 8003ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003adc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003ade:	4b9c      	ldr	r3, [pc, #624]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae2:	091b      	lsrs	r3, r3, #4
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003aea:	4b99      	ldr	r3, [pc, #612]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aee:	08db      	lsrs	r3, r3, #3
 8003af0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 8111 	beq.w	8003d30 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	f000 8083 	beq.w	8003c1c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	f200 80a1 	bhi.w	8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d056      	beq.n	8003bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003b2a:	e099      	b.n	8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b2c:	4b88      	ldr	r3, [pc, #544]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0320 	and.w	r3, r3, #32
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d02d      	beq.n	8003b94 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b38:	4b85      	ldr	r3, [pc, #532]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	08db      	lsrs	r3, r3, #3
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	4a84      	ldr	r2, [pc, #528]	; (8003d54 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003b44:	fa22 f303 	lsr.w	r3, r2, r3
 8003b48:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	ee07 3a90 	vmov	s15, r3
 8003b50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b62:	4b7b      	ldr	r3, [pc, #492]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b6a:	ee07 3a90 	vmov	s15, r3
 8003b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b76:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003d58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003b92:	e087      	b.n	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003d5c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ba6:	4b6a      	ldr	r3, [pc, #424]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003d58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bd6:	e065      	b.n	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003be2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bea:	4b59      	ldr	r3, [pc, #356]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bfe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003d58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c1a:	e043      	b.n	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003d64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c2e:	4b48      	ldr	r3, [pc, #288]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c36:	ee07 3a90 	vmov	s15, r3
 8003c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c42:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003d58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c5e:	e021      	b.n	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	ee07 3a90 	vmov	s15, r3
 8003c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c72:	4b37      	ldr	r3, [pc, #220]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c7a:	ee07 3a90 	vmov	s15, r3
 8003c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c86:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003d58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ca2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003ca4:	4b2a      	ldr	r3, [pc, #168]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca8:	0a5b      	lsrs	r3, r3, #9
 8003caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cca:	ee17 2a90 	vmov	r2, s15
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003cd2:	4b1f      	ldr	r3, [pc, #124]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	0c1b      	lsrs	r3, r3, #16
 8003cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cdc:	ee07 3a90 	vmov	s15, r3
 8003ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ce8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cec:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cf8:	ee17 2a90 	vmov	r2, s15
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003d00:	4b13      	ldr	r3, [pc, #76]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d04:	0e1b      	lsrs	r3, r3, #24
 8003d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d0a:	ee07 3a90 	vmov	s15, r3
 8003d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d26:	ee17 2a90 	vmov	r2, s15
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003d2e:	e008      	b.n	8003d42 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	609a      	str	r2, [r3, #8]
}
 8003d42:	bf00      	nop
 8003d44:	3724      	adds	r7, #36	; 0x24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	58024400 	.word	0x58024400
 8003d54:	03d09000 	.word	0x03d09000
 8003d58:	46000000 	.word	0x46000000
 8003d5c:	4c742400 	.word	0x4c742400
 8003d60:	4a742400 	.word	0x4a742400
 8003d64:	4bbebc20 	.word	0x4bbebc20

08003d68 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b089      	sub	sp, #36	; 0x24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d70:	4ba1      	ldr	r3, [pc, #644]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	f003 0303 	and.w	r3, r3, #3
 8003d78:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003d7a:	4b9f      	ldr	r3, [pc, #636]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	0d1b      	lsrs	r3, r3, #20
 8003d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d84:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003d86:	4b9c      	ldr	r3, [pc, #624]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8a:	0a1b      	lsrs	r3, r3, #8
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003d92:	4b99      	ldr	r3, [pc, #612]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d96:	08db      	lsrs	r3, r3, #3
 8003d98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	fb02 f303 	mul.w	r3, r2, r3
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003daa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 8111 	beq.w	8003fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	f000 8083 	beq.w	8003ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	f200 80a1 	bhi.w	8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d056      	beq.n	8003e80 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003dd2:	e099      	b.n	8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dd4:	4b88      	ldr	r3, [pc, #544]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0320 	and.w	r3, r3, #32
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d02d      	beq.n	8003e3c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003de0:	4b85      	ldr	r3, [pc, #532]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	08db      	lsrs	r3, r3, #3
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	4a84      	ldr	r2, [pc, #528]	; (8003ffc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003dec:	fa22 f303 	lsr.w	r3, r2, r3
 8003df0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	ee07 3a90 	vmov	s15, r3
 8003df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e0a:	4b7b      	ldr	r3, [pc, #492]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003e3a:	e087      	b.n	8003f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004004 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e4e:	4b6a      	ldr	r3, [pc, #424]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e56:	ee07 3a90 	vmov	s15, r3
 8003e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e62:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e7e:	e065      	b.n	8003f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004008 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e92:	4b59      	ldr	r3, [pc, #356]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ea6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ebe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ec2:	e043      	b.n	8003f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	ee07 3a90 	vmov	s15, r3
 8003eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ece:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800400c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ed6:	4b48      	ldr	r3, [pc, #288]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003eea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f06:	e021      	b.n	8003f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	ee07 3a90 	vmov	s15, r3
 8003f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004008 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f1a:	4b37      	ldr	r3, [pc, #220]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003f4c:	4b2a      	ldr	r3, [pc, #168]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	0a5b      	lsrs	r3, r3, #9
 8003f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f66:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f72:	ee17 2a90 	vmov	r2, s15
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003f7a:	4b1f      	ldr	r3, [pc, #124]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	0c1b      	lsrs	r3, r3, #16
 8003f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f84:	ee07 3a90 	vmov	s15, r3
 8003f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f94:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fa0:	ee17 2a90 	vmov	r2, s15
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003fa8:	4b13      	ldr	r3, [pc, #76]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	0e1b      	lsrs	r3, r3, #24
 8003fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fce:	ee17 2a90 	vmov	r2, s15
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003fd6:	e008      	b.n	8003fea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	609a      	str	r2, [r3, #8]
}
 8003fea:	bf00      	nop
 8003fec:	3724      	adds	r7, #36	; 0x24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	58024400 	.word	0x58024400
 8003ffc:	03d09000 	.word	0x03d09000
 8004000:	46000000 	.word	0x46000000
 8004004:	4c742400 	.word	0x4c742400
 8004008:	4a742400 	.word	0x4a742400
 800400c:	4bbebc20 	.word	0x4bbebc20

08004010 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800401e:	4b53      	ldr	r3, [pc, #332]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004022:	f003 0303 	and.w	r3, r3, #3
 8004026:	2b03      	cmp	r3, #3
 8004028:	d101      	bne.n	800402e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e099      	b.n	8004162 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800402e:	4b4f      	ldr	r3, [pc, #316]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a4e      	ldr	r2, [pc, #312]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004034:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004038:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800403a:	f7fc fecd 	bl	8000dd8 <HAL_GetTick>
 800403e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004040:	e008      	b.n	8004054 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004042:	f7fc fec9 	bl	8000dd8 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e086      	b.n	8004162 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004054:	4b45      	ldr	r3, [pc, #276]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1f0      	bne.n	8004042 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004060:	4b42      	ldr	r3, [pc, #264]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	031b      	lsls	r3, r3, #12
 800406e:	493f      	ldr	r1, [pc, #252]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004070:	4313      	orrs	r3, r2
 8004072:	628b      	str	r3, [r1, #40]	; 0x28
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	3b01      	subs	r3, #1
 800407a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	3b01      	subs	r3, #1
 8004084:	025b      	lsls	r3, r3, #9
 8004086:	b29b      	uxth	r3, r3
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	3b01      	subs	r3, #1
 8004090:	041b      	lsls	r3, r3, #16
 8004092:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	3b01      	subs	r3, #1
 800409e:	061b      	lsls	r3, r3, #24
 80040a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80040a4:	4931      	ldr	r1, [pc, #196]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80040aa:	4b30      	ldr	r3, [pc, #192]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 80040ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	492d      	ldr	r1, [pc, #180]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80040bc:	4b2b      	ldr	r3, [pc, #172]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 80040be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c0:	f023 0220 	bic.w	r2, r3, #32
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	4928      	ldr	r1, [pc, #160]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80040ce:	4b27      	ldr	r3, [pc, #156]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d2:	4a26      	ldr	r2, [pc, #152]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 80040d4:	f023 0310 	bic.w	r3, r3, #16
 80040d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80040da:	4b24      	ldr	r3, [pc, #144]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 80040dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040de:	4b24      	ldr	r3, [pc, #144]	; (8004170 <RCCEx_PLL2_Config+0x160>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	69d2      	ldr	r2, [r2, #28]
 80040e6:	00d2      	lsls	r2, r2, #3
 80040e8:	4920      	ldr	r1, [pc, #128]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80040ee:	4b1f      	ldr	r3, [pc, #124]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	4a1e      	ldr	r2, [pc, #120]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 80040f4:	f043 0310 	orr.w	r3, r3, #16
 80040f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d106      	bne.n	800410e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004100:	4b1a      	ldr	r3, [pc, #104]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	4a19      	ldr	r2, [pc, #100]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004106:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800410a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800410c:	e00f      	b.n	800412e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d106      	bne.n	8004122 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004114:	4b15      	ldr	r3, [pc, #84]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	4a14      	ldr	r2, [pc, #80]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 800411a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800411e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004120:	e005      	b.n	800412e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004122:	4b12      	ldr	r3, [pc, #72]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	4a11      	ldr	r2, [pc, #68]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004128:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800412c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800412e:	4b0f      	ldr	r3, [pc, #60]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a0e      	ldr	r2, [pc, #56]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004134:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800413a:	f7fc fe4d 	bl	8000dd8 <HAL_GetTick>
 800413e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004140:	e008      	b.n	8004154 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004142:	f7fc fe49 	bl	8000dd8 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e006      	b.n	8004162 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004154:	4b05      	ldr	r3, [pc, #20]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0f0      	beq.n	8004142 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004160:	7bfb      	ldrb	r3, [r7, #15]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	58024400 	.word	0x58024400
 8004170:	ffff0007 	.word	0xffff0007

08004174 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004182:	4b53      	ldr	r3, [pc, #332]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	2b03      	cmp	r3, #3
 800418c:	d101      	bne.n	8004192 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e099      	b.n	80042c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004192:	4b4f      	ldr	r3, [pc, #316]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a4e      	ldr	r2, [pc, #312]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800419c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800419e:	f7fc fe1b 	bl	8000dd8 <HAL_GetTick>
 80041a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041a4:	e008      	b.n	80041b8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80041a6:	f7fc fe17 	bl	8000dd8 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d901      	bls.n	80041b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e086      	b.n	80042c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041b8:	4b45      	ldr	r3, [pc, #276]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1f0      	bne.n	80041a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80041c4:	4b42      	ldr	r3, [pc, #264]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	051b      	lsls	r3, r3, #20
 80041d2:	493f      	ldr	r1, [pc, #252]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	628b      	str	r3, [r1, #40]	; 0x28
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	3b01      	subs	r3, #1
 80041de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	3b01      	subs	r3, #1
 80041e8:	025b      	lsls	r3, r3, #9
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	041b      	lsls	r3, r3, #16
 80041f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	3b01      	subs	r3, #1
 8004202:	061b      	lsls	r3, r3, #24
 8004204:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004208:	4931      	ldr	r1, [pc, #196]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 800420a:	4313      	orrs	r3, r2
 800420c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800420e:	4b30      	ldr	r3, [pc, #192]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	492d      	ldr	r1, [pc, #180]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 800421c:	4313      	orrs	r3, r2
 800421e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004220:	4b2b      	ldr	r3, [pc, #172]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	4928      	ldr	r1, [pc, #160]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 800422e:	4313      	orrs	r3, r2
 8004230:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004232:	4b27      	ldr	r3, [pc, #156]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004236:	4a26      	ldr	r2, [pc, #152]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800423c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800423e:	4b24      	ldr	r3, [pc, #144]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004242:	4b24      	ldr	r3, [pc, #144]	; (80042d4 <RCCEx_PLL3_Config+0x160>)
 8004244:	4013      	ands	r3, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	69d2      	ldr	r2, [r2, #28]
 800424a:	00d2      	lsls	r2, r2, #3
 800424c:	4920      	ldr	r1, [pc, #128]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 800424e:	4313      	orrs	r3, r2
 8004250:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004252:	4b1f      	ldr	r3, [pc, #124]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004256:	4a1e      	ldr	r2, [pc, #120]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d106      	bne.n	8004272 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004264:	4b1a      	ldr	r3, [pc, #104]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004268:	4a19      	ldr	r2, [pc, #100]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 800426a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800426e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004270:	e00f      	b.n	8004292 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d106      	bne.n	8004286 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004278:	4b15      	ldr	r3, [pc, #84]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	4a14      	ldr	r2, [pc, #80]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 800427e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004282:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004284:	e005      	b.n	8004292 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004286:	4b12      	ldr	r3, [pc, #72]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428a:	4a11      	ldr	r2, [pc, #68]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 800428c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004290:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004292:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a0e      	ldr	r2, [pc, #56]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800429c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800429e:	f7fc fd9b 	bl	8000dd8 <HAL_GetTick>
 80042a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042a4:	e008      	b.n	80042b8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80042a6:	f7fc fd97 	bl	8000dd8 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e006      	b.n	80042c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0f0      	beq.n	80042a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	58024400 	.word	0x58024400
 80042d4:	ffff0007 	.word	0xffff0007

080042d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e049      	b.n	800437e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7fc fbf4 	bl	8000aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3304      	adds	r3, #4
 8004314:	4619      	mov	r1, r3
 8004316:	4610      	mov	r0, r2
 8004318:	f000 faee 	bl	80048f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b01      	cmp	r3, #1
 800439a:	d001      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e054      	b.n	800444a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0201 	orr.w	r2, r2, #1
 80043b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a26      	ldr	r2, [pc, #152]	; (8004458 <HAL_TIM_Base_Start_IT+0xd0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d022      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x80>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ca:	d01d      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x80>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a22      	ldr	r2, [pc, #136]	; (800445c <HAL_TIM_Base_Start_IT+0xd4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d018      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x80>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a21      	ldr	r2, [pc, #132]	; (8004460 <HAL_TIM_Base_Start_IT+0xd8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d013      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x80>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a1f      	ldr	r2, [pc, #124]	; (8004464 <HAL_TIM_Base_Start_IT+0xdc>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d00e      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x80>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a1e      	ldr	r2, [pc, #120]	; (8004468 <HAL_TIM_Base_Start_IT+0xe0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d009      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x80>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a1c      	ldr	r2, [pc, #112]	; (800446c <HAL_TIM_Base_Start_IT+0xe4>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d004      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x80>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a1b      	ldr	r2, [pc, #108]	; (8004470 <HAL_TIM_Base_Start_IT+0xe8>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d115      	bne.n	8004434 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	4b19      	ldr	r3, [pc, #100]	; (8004474 <HAL_TIM_Base_Start_IT+0xec>)
 8004410:	4013      	ands	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b06      	cmp	r3, #6
 8004418:	d015      	beq.n	8004446 <HAL_TIM_Base_Start_IT+0xbe>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004420:	d011      	beq.n	8004446 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f042 0201 	orr.w	r2, r2, #1
 8004430:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004432:	e008      	b.n	8004446 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0201 	orr.w	r2, r2, #1
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	e000      	b.n	8004448 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004446:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40010000 	.word	0x40010000
 800445c:	40000400 	.word	0x40000400
 8004460:	40000800 	.word	0x40000800
 8004464:	40000c00 	.word	0x40000c00
 8004468:	40010400 	.word	0x40010400
 800446c:	40001800 	.word	0x40001800
 8004470:	40014000 	.word	0x40014000
 8004474:	00010007 	.word	0x00010007

08004478 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b02      	cmp	r3, #2
 800448c:	d122      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b02      	cmp	r3, #2
 800449a:	d11b      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0202 	mvn.w	r2, #2
 80044a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f9fe 	bl	80048bc <HAL_TIM_IC_CaptureCallback>
 80044c0:	e005      	b.n	80044ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f9f0 	bl	80048a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 fa01 	bl	80048d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0304 	and.w	r3, r3, #4
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d122      	bne.n	8004528 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d11b      	bne.n	8004528 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0204 	mvn.w	r2, #4
 80044f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2202      	movs	r2, #2
 80044fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f9d4 	bl	80048bc <HAL_TIM_IC_CaptureCallback>
 8004514:	e005      	b.n	8004522 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f9c6 	bl	80048a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f9d7 	bl	80048d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b08      	cmp	r3, #8
 8004534:	d122      	bne.n	800457c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f003 0308 	and.w	r3, r3, #8
 8004540:	2b08      	cmp	r3, #8
 8004542:	d11b      	bne.n	800457c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0208 	mvn.w	r2, #8
 800454c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2204      	movs	r2, #4
 8004552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f9aa 	bl	80048bc <HAL_TIM_IC_CaptureCallback>
 8004568:	e005      	b.n	8004576 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f99c 	bl	80048a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f9ad 	bl	80048d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f003 0310 	and.w	r3, r3, #16
 8004586:	2b10      	cmp	r3, #16
 8004588:	d122      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	2b10      	cmp	r3, #16
 8004596:	d11b      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f06f 0210 	mvn.w	r2, #16
 80045a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2208      	movs	r2, #8
 80045a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f980 	bl	80048bc <HAL_TIM_IC_CaptureCallback>
 80045bc:	e005      	b.n	80045ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f972 	bl	80048a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f983 	bl	80048d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d10e      	bne.n	80045fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d107      	bne.n	80045fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0201 	mvn.w	r2, #1
 80045f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7fc fa48 	bl	8000a8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004606:	2b80      	cmp	r3, #128	; 0x80
 8004608:	d10e      	bne.n	8004628 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004614:	2b80      	cmp	r3, #128	; 0x80
 8004616:	d107      	bne.n	8004628 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fb38 	bl	8004c98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004636:	d10e      	bne.n	8004656 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004642:	2b80      	cmp	r3, #128	; 0x80
 8004644:	d107      	bne.n	8004656 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800464e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 fb2b 	bl	8004cac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004660:	2b40      	cmp	r3, #64	; 0x40
 8004662:	d10e      	bne.n	8004682 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466e:	2b40      	cmp	r3, #64	; 0x40
 8004670:	d107      	bne.n	8004682 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800467a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f931 	bl	80048e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	f003 0320 	and.w	r3, r3, #32
 800468c:	2b20      	cmp	r3, #32
 800468e:	d10e      	bne.n	80046ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b20      	cmp	r3, #32
 800469c:	d107      	bne.n	80046ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f06f 0220 	mvn.w	r2, #32
 80046a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 faeb 	bl	8004c84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046ae:	bf00      	nop
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
	...

080046b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_TIM_ConfigClockSource+0x1c>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e0dc      	b.n	800488e <HAL_TIM_ConfigClockSource+0x1d6>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	4b6a      	ldr	r3, [pc, #424]	; (8004898 <HAL_TIM_ConfigClockSource+0x1e0>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a64      	ldr	r2, [pc, #400]	; (800489c <HAL_TIM_ConfigClockSource+0x1e4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	f000 80a9 	beq.w	8004862 <HAL_TIM_ConfigClockSource+0x1aa>
 8004710:	4a62      	ldr	r2, [pc, #392]	; (800489c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	f200 80ae 	bhi.w	8004874 <HAL_TIM_ConfigClockSource+0x1bc>
 8004718:	4a61      	ldr	r2, [pc, #388]	; (80048a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	f000 80a1 	beq.w	8004862 <HAL_TIM_ConfigClockSource+0x1aa>
 8004720:	4a5f      	ldr	r2, [pc, #380]	; (80048a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	f200 80a6 	bhi.w	8004874 <HAL_TIM_ConfigClockSource+0x1bc>
 8004728:	4a5e      	ldr	r2, [pc, #376]	; (80048a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800472a:	4293      	cmp	r3, r2
 800472c:	f000 8099 	beq.w	8004862 <HAL_TIM_ConfigClockSource+0x1aa>
 8004730:	4a5c      	ldr	r2, [pc, #368]	; (80048a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004732:	4293      	cmp	r3, r2
 8004734:	f200 809e 	bhi.w	8004874 <HAL_TIM_ConfigClockSource+0x1bc>
 8004738:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800473c:	f000 8091 	beq.w	8004862 <HAL_TIM_ConfigClockSource+0x1aa>
 8004740:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004744:	f200 8096 	bhi.w	8004874 <HAL_TIM_ConfigClockSource+0x1bc>
 8004748:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800474c:	f000 8089 	beq.w	8004862 <HAL_TIM_ConfigClockSource+0x1aa>
 8004750:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004754:	f200 808e 	bhi.w	8004874 <HAL_TIM_ConfigClockSource+0x1bc>
 8004758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800475c:	d03e      	beq.n	80047dc <HAL_TIM_ConfigClockSource+0x124>
 800475e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004762:	f200 8087 	bhi.w	8004874 <HAL_TIM_ConfigClockSource+0x1bc>
 8004766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476a:	f000 8086 	beq.w	800487a <HAL_TIM_ConfigClockSource+0x1c2>
 800476e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004772:	d87f      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x1bc>
 8004774:	2b70      	cmp	r3, #112	; 0x70
 8004776:	d01a      	beq.n	80047ae <HAL_TIM_ConfigClockSource+0xf6>
 8004778:	2b70      	cmp	r3, #112	; 0x70
 800477a:	d87b      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x1bc>
 800477c:	2b60      	cmp	r3, #96	; 0x60
 800477e:	d050      	beq.n	8004822 <HAL_TIM_ConfigClockSource+0x16a>
 8004780:	2b60      	cmp	r3, #96	; 0x60
 8004782:	d877      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x1bc>
 8004784:	2b50      	cmp	r3, #80	; 0x50
 8004786:	d03c      	beq.n	8004802 <HAL_TIM_ConfigClockSource+0x14a>
 8004788:	2b50      	cmp	r3, #80	; 0x50
 800478a:	d873      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x1bc>
 800478c:	2b40      	cmp	r3, #64	; 0x40
 800478e:	d058      	beq.n	8004842 <HAL_TIM_ConfigClockSource+0x18a>
 8004790:	2b40      	cmp	r3, #64	; 0x40
 8004792:	d86f      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x1bc>
 8004794:	2b30      	cmp	r3, #48	; 0x30
 8004796:	d064      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0x1aa>
 8004798:	2b30      	cmp	r3, #48	; 0x30
 800479a:	d86b      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x1bc>
 800479c:	2b20      	cmp	r3, #32
 800479e:	d060      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0x1aa>
 80047a0:	2b20      	cmp	r3, #32
 80047a2:	d867      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x1bc>
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d05c      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0x1aa>
 80047a8:	2b10      	cmp	r3, #16
 80047aa:	d05a      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0x1aa>
 80047ac:	e062      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047be:	f000 f9b3 	bl	8004b28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	609a      	str	r2, [r3, #8]
      break;
 80047da:	e04f      	b.n	800487c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047ec:	f000 f99c 	bl	8004b28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047fe:	609a      	str	r2, [r3, #8]
      break;
 8004800:	e03c      	b.n	800487c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800480e:	461a      	mov	r2, r3
 8004810:	f000 f90c 	bl	8004a2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2150      	movs	r1, #80	; 0x50
 800481a:	4618      	mov	r0, r3
 800481c:	f000 f966 	bl	8004aec <TIM_ITRx_SetConfig>
      break;
 8004820:	e02c      	b.n	800487c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800482e:	461a      	mov	r2, r3
 8004830:	f000 f92b 	bl	8004a8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2160      	movs	r1, #96	; 0x60
 800483a:	4618      	mov	r0, r3
 800483c:	f000 f956 	bl	8004aec <TIM_ITRx_SetConfig>
      break;
 8004840:	e01c      	b.n	800487c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800484e:	461a      	mov	r2, r3
 8004850:	f000 f8ec 	bl	8004a2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2140      	movs	r1, #64	; 0x40
 800485a:	4618      	mov	r0, r3
 800485c:	f000 f946 	bl	8004aec <TIM_ITRx_SetConfig>
      break;
 8004860:	e00c      	b.n	800487c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4619      	mov	r1, r3
 800486c:	4610      	mov	r0, r2
 800486e:	f000 f93d 	bl	8004aec <TIM_ITRx_SetConfig>
      break;
 8004872:	e003      	b.n	800487c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	73fb      	strb	r3, [r7, #15]
      break;
 8004878:	e000      	b.n	800487c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800487a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800488c:	7bfb      	ldrb	r3, [r7, #15]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	ffceff88 	.word	0xffceff88
 800489c:	00100040 	.word	0x00100040
 80048a0:	00100030 	.word	0x00100030
 80048a4:	00100020 	.word	0x00100020

080048a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a40      	ldr	r2, [pc, #256]	; (8004a0c <TIM_Base_SetConfig+0x114>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d013      	beq.n	8004938 <TIM_Base_SetConfig+0x40>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004916:	d00f      	beq.n	8004938 <TIM_Base_SetConfig+0x40>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a3d      	ldr	r2, [pc, #244]	; (8004a10 <TIM_Base_SetConfig+0x118>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00b      	beq.n	8004938 <TIM_Base_SetConfig+0x40>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a3c      	ldr	r2, [pc, #240]	; (8004a14 <TIM_Base_SetConfig+0x11c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d007      	beq.n	8004938 <TIM_Base_SetConfig+0x40>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a3b      	ldr	r2, [pc, #236]	; (8004a18 <TIM_Base_SetConfig+0x120>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d003      	beq.n	8004938 <TIM_Base_SetConfig+0x40>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a3a      	ldr	r2, [pc, #232]	; (8004a1c <TIM_Base_SetConfig+0x124>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d108      	bne.n	800494a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a2f      	ldr	r2, [pc, #188]	; (8004a0c <TIM_Base_SetConfig+0x114>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d01f      	beq.n	8004992 <TIM_Base_SetConfig+0x9a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004958:	d01b      	beq.n	8004992 <TIM_Base_SetConfig+0x9a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a2c      	ldr	r2, [pc, #176]	; (8004a10 <TIM_Base_SetConfig+0x118>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d017      	beq.n	8004992 <TIM_Base_SetConfig+0x9a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a2b      	ldr	r2, [pc, #172]	; (8004a14 <TIM_Base_SetConfig+0x11c>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d013      	beq.n	8004992 <TIM_Base_SetConfig+0x9a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a2a      	ldr	r2, [pc, #168]	; (8004a18 <TIM_Base_SetConfig+0x120>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d00f      	beq.n	8004992 <TIM_Base_SetConfig+0x9a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a29      	ldr	r2, [pc, #164]	; (8004a1c <TIM_Base_SetConfig+0x124>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00b      	beq.n	8004992 <TIM_Base_SetConfig+0x9a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a28      	ldr	r2, [pc, #160]	; (8004a20 <TIM_Base_SetConfig+0x128>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d007      	beq.n	8004992 <TIM_Base_SetConfig+0x9a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a27      	ldr	r2, [pc, #156]	; (8004a24 <TIM_Base_SetConfig+0x12c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d003      	beq.n	8004992 <TIM_Base_SetConfig+0x9a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a26      	ldr	r2, [pc, #152]	; (8004a28 <TIM_Base_SetConfig+0x130>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d108      	bne.n	80049a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a10      	ldr	r2, [pc, #64]	; (8004a0c <TIM_Base_SetConfig+0x114>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00f      	beq.n	80049f0 <TIM_Base_SetConfig+0xf8>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a12      	ldr	r2, [pc, #72]	; (8004a1c <TIM_Base_SetConfig+0x124>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d00b      	beq.n	80049f0 <TIM_Base_SetConfig+0xf8>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a11      	ldr	r2, [pc, #68]	; (8004a20 <TIM_Base_SetConfig+0x128>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d007      	beq.n	80049f0 <TIM_Base_SetConfig+0xf8>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a10      	ldr	r2, [pc, #64]	; (8004a24 <TIM_Base_SetConfig+0x12c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d003      	beq.n	80049f0 <TIM_Base_SetConfig+0xf8>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a0f      	ldr	r2, [pc, #60]	; (8004a28 <TIM_Base_SetConfig+0x130>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d103      	bne.n	80049f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	615a      	str	r2, [r3, #20]
}
 80049fe:	bf00      	nop
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	40010000 	.word	0x40010000
 8004a10:	40000400 	.word	0x40000400
 8004a14:	40000800 	.word	0x40000800
 8004a18:	40000c00 	.word	0x40000c00
 8004a1c:	40010400 	.word	0x40010400
 8004a20:	40014000 	.word	0x40014000
 8004a24:	40014400 	.word	0x40014400
 8004a28:	40014800 	.word	0x40014800

08004a2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	f023 0201 	bic.w	r2, r3, #1
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f023 030a 	bic.w	r3, r3, #10
 8004a68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	621a      	str	r2, [r3, #32]
}
 8004a7e:	bf00      	nop
 8004a80:	371c      	adds	r7, #28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b087      	sub	sp, #28
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	f023 0210 	bic.w	r2, r3, #16
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ab4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	031b      	lsls	r3, r3, #12
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ac6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	621a      	str	r2, [r3, #32]
}
 8004ade:	bf00      	nop
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
	...

08004aec <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <TIM_ITRx_SetConfig+0x38>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f043 0307 	orr.w	r3, r3, #7
 8004b0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	609a      	str	r2, [r3, #8]
}
 8004b16:	bf00      	nop
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	ffcfff8f 	.word	0xffcfff8f

08004b28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	021a      	lsls	r2, r3, #8
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	609a      	str	r2, [r3, #8]
}
 8004b5c:	bf00      	nop
 8004b5e:	371c      	adds	r7, #28
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d101      	bne.n	8004b80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e06d      	b.n	8004c5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a30      	ldr	r2, [pc, #192]	; (8004c68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d004      	beq.n	8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a2f      	ldr	r2, [pc, #188]	; (8004c6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d108      	bne.n	8004bc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004bba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bcc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a20      	ldr	r2, [pc, #128]	; (8004c68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d022      	beq.n	8004c30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf2:	d01d      	beq.n	8004c30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a1d      	ldr	r2, [pc, #116]	; (8004c70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d018      	beq.n	8004c30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a1c      	ldr	r2, [pc, #112]	; (8004c74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d013      	beq.n	8004c30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1a      	ldr	r2, [pc, #104]	; (8004c78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d00e      	beq.n	8004c30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a15      	ldr	r2, [pc, #84]	; (8004c6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d009      	beq.n	8004c30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a16      	ldr	r2, [pc, #88]	; (8004c7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d004      	beq.n	8004c30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a15      	ldr	r2, [pc, #84]	; (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d10c      	bne.n	8004c4a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	40010000 	.word	0x40010000
 8004c6c:	40010400 	.word	0x40010400
 8004c70:	40000400 	.word	0x40000400
 8004c74:	40000800 	.word	0x40000800
 8004c78:	40000c00 	.word	0x40000c00
 8004c7c:	40001800 	.word	0x40001800
 8004c80:	40014000 	.word	0x40014000

08004c84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e042      	b.n	8004d58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d106      	bne.n	8004cea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7fb ff29 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2224      	movs	r2, #36	; 0x24
 8004cee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0201 	bic.w	r2, r2, #1
 8004d00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f8ba 	bl	8004e7c <UART_SetConfig>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d101      	bne.n	8004d12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e022      	b.n	8004d58 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d002      	beq.n	8004d20 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 fe16 	bl	800594c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0201 	orr.w	r2, r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 fe9d 	bl	8005a90 <UART_CheckIdleState>
 8004d56:	4603      	mov	r3, r0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08a      	sub	sp, #40	; 0x28
 8004d64:	af02      	add	r7, sp, #8
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d76:	2b20      	cmp	r3, #32
 8004d78:	d17b      	bne.n	8004e72 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <HAL_UART_Transmit+0x26>
 8004d80:	88fb      	ldrh	r3, [r7, #6]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e074      	b.n	8004e74 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2221      	movs	r2, #33	; 0x21
 8004d96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d9a:	f7fc f81d 	bl	8000dd8 <HAL_GetTick>
 8004d9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	88fa      	ldrh	r2, [r7, #6]
 8004da4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	88fa      	ldrh	r2, [r7, #6]
 8004dac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db8:	d108      	bne.n	8004dcc <HAL_UART_Transmit+0x6c>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d104      	bne.n	8004dcc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	61bb      	str	r3, [r7, #24]
 8004dca:	e003      	b.n	8004dd4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004dd4:	e030      	b.n	8004e38 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	2180      	movs	r1, #128	; 0x80
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f000 feff 	bl	8005be4 <UART_WaitOnFlagUntilTimeout>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d005      	beq.n	8004df8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e03d      	b.n	8004e74 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10b      	bne.n	8004e16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	461a      	mov	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e0c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	3302      	adds	r3, #2
 8004e12:	61bb      	str	r3, [r7, #24]
 8004e14:	e007      	b.n	8004e26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	781a      	ldrb	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	3301      	adds	r3, #1
 8004e24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1c8      	bne.n	8004dd6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	2140      	movs	r1, #64	; 0x40
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f000 fec8 	bl	8005be4 <UART_WaitOnFlagUntilTimeout>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d005      	beq.n	8004e66 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e006      	b.n	8004e74 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	e000      	b.n	8004e74 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004e72:	2302      	movs	r3, #2
  }
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3720      	adds	r7, #32
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e80:	b092      	sub	sp, #72	; 0x48
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	431a      	orrs	r2, r3
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4bbe      	ldr	r3, [pc, #760]	; (80051a4 <UART_SetConfig+0x328>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	6812      	ldr	r2, [r2, #0]
 8004eb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004eb4:	430b      	orrs	r3, r1
 8004eb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4ab3      	ldr	r2, [pc, #716]	; (80051a8 <UART_SetConfig+0x32c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d004      	beq.n	8004ee8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	4baf      	ldr	r3, [pc, #700]	; (80051ac <UART_SetConfig+0x330>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	6812      	ldr	r2, [r2, #0]
 8004ef6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ef8:	430b      	orrs	r3, r1
 8004efa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f02:	f023 010f 	bic.w	r1, r3, #15
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4aa6      	ldr	r2, [pc, #664]	; (80051b0 <UART_SetConfig+0x334>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d177      	bne.n	800500c <UART_SetConfig+0x190>
 8004f1c:	4ba5      	ldr	r3, [pc, #660]	; (80051b4 <UART_SetConfig+0x338>)
 8004f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f24:	2b28      	cmp	r3, #40	; 0x28
 8004f26:	d86d      	bhi.n	8005004 <UART_SetConfig+0x188>
 8004f28:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <UART_SetConfig+0xb4>)
 8004f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2e:	bf00      	nop
 8004f30:	08004fd5 	.word	0x08004fd5
 8004f34:	08005005 	.word	0x08005005
 8004f38:	08005005 	.word	0x08005005
 8004f3c:	08005005 	.word	0x08005005
 8004f40:	08005005 	.word	0x08005005
 8004f44:	08005005 	.word	0x08005005
 8004f48:	08005005 	.word	0x08005005
 8004f4c:	08005005 	.word	0x08005005
 8004f50:	08004fdd 	.word	0x08004fdd
 8004f54:	08005005 	.word	0x08005005
 8004f58:	08005005 	.word	0x08005005
 8004f5c:	08005005 	.word	0x08005005
 8004f60:	08005005 	.word	0x08005005
 8004f64:	08005005 	.word	0x08005005
 8004f68:	08005005 	.word	0x08005005
 8004f6c:	08005005 	.word	0x08005005
 8004f70:	08004fe5 	.word	0x08004fe5
 8004f74:	08005005 	.word	0x08005005
 8004f78:	08005005 	.word	0x08005005
 8004f7c:	08005005 	.word	0x08005005
 8004f80:	08005005 	.word	0x08005005
 8004f84:	08005005 	.word	0x08005005
 8004f88:	08005005 	.word	0x08005005
 8004f8c:	08005005 	.word	0x08005005
 8004f90:	08004fed 	.word	0x08004fed
 8004f94:	08005005 	.word	0x08005005
 8004f98:	08005005 	.word	0x08005005
 8004f9c:	08005005 	.word	0x08005005
 8004fa0:	08005005 	.word	0x08005005
 8004fa4:	08005005 	.word	0x08005005
 8004fa8:	08005005 	.word	0x08005005
 8004fac:	08005005 	.word	0x08005005
 8004fb0:	08004ff5 	.word	0x08004ff5
 8004fb4:	08005005 	.word	0x08005005
 8004fb8:	08005005 	.word	0x08005005
 8004fbc:	08005005 	.word	0x08005005
 8004fc0:	08005005 	.word	0x08005005
 8004fc4:	08005005 	.word	0x08005005
 8004fc8:	08005005 	.word	0x08005005
 8004fcc:	08005005 	.word	0x08005005
 8004fd0:	08004ffd 	.word	0x08004ffd
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fda:	e222      	b.n	8005422 <UART_SetConfig+0x5a6>
 8004fdc:	2304      	movs	r3, #4
 8004fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fe2:	e21e      	b.n	8005422 <UART_SetConfig+0x5a6>
 8004fe4:	2308      	movs	r3, #8
 8004fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fea:	e21a      	b.n	8005422 <UART_SetConfig+0x5a6>
 8004fec:	2310      	movs	r3, #16
 8004fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ff2:	e216      	b.n	8005422 <UART_SetConfig+0x5a6>
 8004ff4:	2320      	movs	r3, #32
 8004ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ffa:	e212      	b.n	8005422 <UART_SetConfig+0x5a6>
 8004ffc:	2340      	movs	r3, #64	; 0x40
 8004ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005002:	e20e      	b.n	8005422 <UART_SetConfig+0x5a6>
 8005004:	2380      	movs	r3, #128	; 0x80
 8005006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800500a:	e20a      	b.n	8005422 <UART_SetConfig+0x5a6>
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a69      	ldr	r2, [pc, #420]	; (80051b8 <UART_SetConfig+0x33c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d130      	bne.n	8005078 <UART_SetConfig+0x1fc>
 8005016:	4b67      	ldr	r3, [pc, #412]	; (80051b4 <UART_SetConfig+0x338>)
 8005018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	2b05      	cmp	r3, #5
 8005020:	d826      	bhi.n	8005070 <UART_SetConfig+0x1f4>
 8005022:	a201      	add	r2, pc, #4	; (adr r2, 8005028 <UART_SetConfig+0x1ac>)
 8005024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005028:	08005041 	.word	0x08005041
 800502c:	08005049 	.word	0x08005049
 8005030:	08005051 	.word	0x08005051
 8005034:	08005059 	.word	0x08005059
 8005038:	08005061 	.word	0x08005061
 800503c:	08005069 	.word	0x08005069
 8005040:	2300      	movs	r3, #0
 8005042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005046:	e1ec      	b.n	8005422 <UART_SetConfig+0x5a6>
 8005048:	2304      	movs	r3, #4
 800504a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800504e:	e1e8      	b.n	8005422 <UART_SetConfig+0x5a6>
 8005050:	2308      	movs	r3, #8
 8005052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005056:	e1e4      	b.n	8005422 <UART_SetConfig+0x5a6>
 8005058:	2310      	movs	r3, #16
 800505a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800505e:	e1e0      	b.n	8005422 <UART_SetConfig+0x5a6>
 8005060:	2320      	movs	r3, #32
 8005062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005066:	e1dc      	b.n	8005422 <UART_SetConfig+0x5a6>
 8005068:	2340      	movs	r3, #64	; 0x40
 800506a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800506e:	e1d8      	b.n	8005422 <UART_SetConfig+0x5a6>
 8005070:	2380      	movs	r3, #128	; 0x80
 8005072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005076:	e1d4      	b.n	8005422 <UART_SetConfig+0x5a6>
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a4f      	ldr	r2, [pc, #316]	; (80051bc <UART_SetConfig+0x340>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d130      	bne.n	80050e4 <UART_SetConfig+0x268>
 8005082:	4b4c      	ldr	r3, [pc, #304]	; (80051b4 <UART_SetConfig+0x338>)
 8005084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	2b05      	cmp	r3, #5
 800508c:	d826      	bhi.n	80050dc <UART_SetConfig+0x260>
 800508e:	a201      	add	r2, pc, #4	; (adr r2, 8005094 <UART_SetConfig+0x218>)
 8005090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005094:	080050ad 	.word	0x080050ad
 8005098:	080050b5 	.word	0x080050b5
 800509c:	080050bd 	.word	0x080050bd
 80050a0:	080050c5 	.word	0x080050c5
 80050a4:	080050cd 	.word	0x080050cd
 80050a8:	080050d5 	.word	0x080050d5
 80050ac:	2300      	movs	r3, #0
 80050ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050b2:	e1b6      	b.n	8005422 <UART_SetConfig+0x5a6>
 80050b4:	2304      	movs	r3, #4
 80050b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ba:	e1b2      	b.n	8005422 <UART_SetConfig+0x5a6>
 80050bc:	2308      	movs	r3, #8
 80050be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050c2:	e1ae      	b.n	8005422 <UART_SetConfig+0x5a6>
 80050c4:	2310      	movs	r3, #16
 80050c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ca:	e1aa      	b.n	8005422 <UART_SetConfig+0x5a6>
 80050cc:	2320      	movs	r3, #32
 80050ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050d2:	e1a6      	b.n	8005422 <UART_SetConfig+0x5a6>
 80050d4:	2340      	movs	r3, #64	; 0x40
 80050d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050da:	e1a2      	b.n	8005422 <UART_SetConfig+0x5a6>
 80050dc:	2380      	movs	r3, #128	; 0x80
 80050de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050e2:	e19e      	b.n	8005422 <UART_SetConfig+0x5a6>
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a35      	ldr	r2, [pc, #212]	; (80051c0 <UART_SetConfig+0x344>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d130      	bne.n	8005150 <UART_SetConfig+0x2d4>
 80050ee:	4b31      	ldr	r3, [pc, #196]	; (80051b4 <UART_SetConfig+0x338>)
 80050f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f2:	f003 0307 	and.w	r3, r3, #7
 80050f6:	2b05      	cmp	r3, #5
 80050f8:	d826      	bhi.n	8005148 <UART_SetConfig+0x2cc>
 80050fa:	a201      	add	r2, pc, #4	; (adr r2, 8005100 <UART_SetConfig+0x284>)
 80050fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005100:	08005119 	.word	0x08005119
 8005104:	08005121 	.word	0x08005121
 8005108:	08005129 	.word	0x08005129
 800510c:	08005131 	.word	0x08005131
 8005110:	08005139 	.word	0x08005139
 8005114:	08005141 	.word	0x08005141
 8005118:	2300      	movs	r3, #0
 800511a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800511e:	e180      	b.n	8005422 <UART_SetConfig+0x5a6>
 8005120:	2304      	movs	r3, #4
 8005122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005126:	e17c      	b.n	8005422 <UART_SetConfig+0x5a6>
 8005128:	2308      	movs	r3, #8
 800512a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800512e:	e178      	b.n	8005422 <UART_SetConfig+0x5a6>
 8005130:	2310      	movs	r3, #16
 8005132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005136:	e174      	b.n	8005422 <UART_SetConfig+0x5a6>
 8005138:	2320      	movs	r3, #32
 800513a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800513e:	e170      	b.n	8005422 <UART_SetConfig+0x5a6>
 8005140:	2340      	movs	r3, #64	; 0x40
 8005142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005146:	e16c      	b.n	8005422 <UART_SetConfig+0x5a6>
 8005148:	2380      	movs	r3, #128	; 0x80
 800514a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800514e:	e168      	b.n	8005422 <UART_SetConfig+0x5a6>
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a1b      	ldr	r2, [pc, #108]	; (80051c4 <UART_SetConfig+0x348>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d142      	bne.n	80051e0 <UART_SetConfig+0x364>
 800515a:	4b16      	ldr	r3, [pc, #88]	; (80051b4 <UART_SetConfig+0x338>)
 800515c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515e:	f003 0307 	and.w	r3, r3, #7
 8005162:	2b05      	cmp	r3, #5
 8005164:	d838      	bhi.n	80051d8 <UART_SetConfig+0x35c>
 8005166:	a201      	add	r2, pc, #4	; (adr r2, 800516c <UART_SetConfig+0x2f0>)
 8005168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516c:	08005185 	.word	0x08005185
 8005170:	0800518d 	.word	0x0800518d
 8005174:	08005195 	.word	0x08005195
 8005178:	0800519d 	.word	0x0800519d
 800517c:	080051c9 	.word	0x080051c9
 8005180:	080051d1 	.word	0x080051d1
 8005184:	2300      	movs	r3, #0
 8005186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800518a:	e14a      	b.n	8005422 <UART_SetConfig+0x5a6>
 800518c:	2304      	movs	r3, #4
 800518e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005192:	e146      	b.n	8005422 <UART_SetConfig+0x5a6>
 8005194:	2308      	movs	r3, #8
 8005196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800519a:	e142      	b.n	8005422 <UART_SetConfig+0x5a6>
 800519c:	2310      	movs	r3, #16
 800519e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051a2:	e13e      	b.n	8005422 <UART_SetConfig+0x5a6>
 80051a4:	cfff69f3 	.word	0xcfff69f3
 80051a8:	58000c00 	.word	0x58000c00
 80051ac:	11fff4ff 	.word	0x11fff4ff
 80051b0:	40011000 	.word	0x40011000
 80051b4:	58024400 	.word	0x58024400
 80051b8:	40004400 	.word	0x40004400
 80051bc:	40004800 	.word	0x40004800
 80051c0:	40004c00 	.word	0x40004c00
 80051c4:	40005000 	.word	0x40005000
 80051c8:	2320      	movs	r3, #32
 80051ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ce:	e128      	b.n	8005422 <UART_SetConfig+0x5a6>
 80051d0:	2340      	movs	r3, #64	; 0x40
 80051d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051d6:	e124      	b.n	8005422 <UART_SetConfig+0x5a6>
 80051d8:	2380      	movs	r3, #128	; 0x80
 80051da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051de:	e120      	b.n	8005422 <UART_SetConfig+0x5a6>
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4acb      	ldr	r2, [pc, #812]	; (8005514 <UART_SetConfig+0x698>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d176      	bne.n	80052d8 <UART_SetConfig+0x45c>
 80051ea:	4bcb      	ldr	r3, [pc, #812]	; (8005518 <UART_SetConfig+0x69c>)
 80051ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051f2:	2b28      	cmp	r3, #40	; 0x28
 80051f4:	d86c      	bhi.n	80052d0 <UART_SetConfig+0x454>
 80051f6:	a201      	add	r2, pc, #4	; (adr r2, 80051fc <UART_SetConfig+0x380>)
 80051f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fc:	080052a1 	.word	0x080052a1
 8005200:	080052d1 	.word	0x080052d1
 8005204:	080052d1 	.word	0x080052d1
 8005208:	080052d1 	.word	0x080052d1
 800520c:	080052d1 	.word	0x080052d1
 8005210:	080052d1 	.word	0x080052d1
 8005214:	080052d1 	.word	0x080052d1
 8005218:	080052d1 	.word	0x080052d1
 800521c:	080052a9 	.word	0x080052a9
 8005220:	080052d1 	.word	0x080052d1
 8005224:	080052d1 	.word	0x080052d1
 8005228:	080052d1 	.word	0x080052d1
 800522c:	080052d1 	.word	0x080052d1
 8005230:	080052d1 	.word	0x080052d1
 8005234:	080052d1 	.word	0x080052d1
 8005238:	080052d1 	.word	0x080052d1
 800523c:	080052b1 	.word	0x080052b1
 8005240:	080052d1 	.word	0x080052d1
 8005244:	080052d1 	.word	0x080052d1
 8005248:	080052d1 	.word	0x080052d1
 800524c:	080052d1 	.word	0x080052d1
 8005250:	080052d1 	.word	0x080052d1
 8005254:	080052d1 	.word	0x080052d1
 8005258:	080052d1 	.word	0x080052d1
 800525c:	080052b9 	.word	0x080052b9
 8005260:	080052d1 	.word	0x080052d1
 8005264:	080052d1 	.word	0x080052d1
 8005268:	080052d1 	.word	0x080052d1
 800526c:	080052d1 	.word	0x080052d1
 8005270:	080052d1 	.word	0x080052d1
 8005274:	080052d1 	.word	0x080052d1
 8005278:	080052d1 	.word	0x080052d1
 800527c:	080052c1 	.word	0x080052c1
 8005280:	080052d1 	.word	0x080052d1
 8005284:	080052d1 	.word	0x080052d1
 8005288:	080052d1 	.word	0x080052d1
 800528c:	080052d1 	.word	0x080052d1
 8005290:	080052d1 	.word	0x080052d1
 8005294:	080052d1 	.word	0x080052d1
 8005298:	080052d1 	.word	0x080052d1
 800529c:	080052c9 	.word	0x080052c9
 80052a0:	2301      	movs	r3, #1
 80052a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052a6:	e0bc      	b.n	8005422 <UART_SetConfig+0x5a6>
 80052a8:	2304      	movs	r3, #4
 80052aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ae:	e0b8      	b.n	8005422 <UART_SetConfig+0x5a6>
 80052b0:	2308      	movs	r3, #8
 80052b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052b6:	e0b4      	b.n	8005422 <UART_SetConfig+0x5a6>
 80052b8:	2310      	movs	r3, #16
 80052ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052be:	e0b0      	b.n	8005422 <UART_SetConfig+0x5a6>
 80052c0:	2320      	movs	r3, #32
 80052c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052c6:	e0ac      	b.n	8005422 <UART_SetConfig+0x5a6>
 80052c8:	2340      	movs	r3, #64	; 0x40
 80052ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ce:	e0a8      	b.n	8005422 <UART_SetConfig+0x5a6>
 80052d0:	2380      	movs	r3, #128	; 0x80
 80052d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052d6:	e0a4      	b.n	8005422 <UART_SetConfig+0x5a6>
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a8f      	ldr	r2, [pc, #572]	; (800551c <UART_SetConfig+0x6a0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d130      	bne.n	8005344 <UART_SetConfig+0x4c8>
 80052e2:	4b8d      	ldr	r3, [pc, #564]	; (8005518 <UART_SetConfig+0x69c>)
 80052e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e6:	f003 0307 	and.w	r3, r3, #7
 80052ea:	2b05      	cmp	r3, #5
 80052ec:	d826      	bhi.n	800533c <UART_SetConfig+0x4c0>
 80052ee:	a201      	add	r2, pc, #4	; (adr r2, 80052f4 <UART_SetConfig+0x478>)
 80052f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f4:	0800530d 	.word	0x0800530d
 80052f8:	08005315 	.word	0x08005315
 80052fc:	0800531d 	.word	0x0800531d
 8005300:	08005325 	.word	0x08005325
 8005304:	0800532d 	.word	0x0800532d
 8005308:	08005335 	.word	0x08005335
 800530c:	2300      	movs	r3, #0
 800530e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005312:	e086      	b.n	8005422 <UART_SetConfig+0x5a6>
 8005314:	2304      	movs	r3, #4
 8005316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800531a:	e082      	b.n	8005422 <UART_SetConfig+0x5a6>
 800531c:	2308      	movs	r3, #8
 800531e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005322:	e07e      	b.n	8005422 <UART_SetConfig+0x5a6>
 8005324:	2310      	movs	r3, #16
 8005326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800532a:	e07a      	b.n	8005422 <UART_SetConfig+0x5a6>
 800532c:	2320      	movs	r3, #32
 800532e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005332:	e076      	b.n	8005422 <UART_SetConfig+0x5a6>
 8005334:	2340      	movs	r3, #64	; 0x40
 8005336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800533a:	e072      	b.n	8005422 <UART_SetConfig+0x5a6>
 800533c:	2380      	movs	r3, #128	; 0x80
 800533e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005342:	e06e      	b.n	8005422 <UART_SetConfig+0x5a6>
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a75      	ldr	r2, [pc, #468]	; (8005520 <UART_SetConfig+0x6a4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d130      	bne.n	80053b0 <UART_SetConfig+0x534>
 800534e:	4b72      	ldr	r3, [pc, #456]	; (8005518 <UART_SetConfig+0x69c>)
 8005350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005352:	f003 0307 	and.w	r3, r3, #7
 8005356:	2b05      	cmp	r3, #5
 8005358:	d826      	bhi.n	80053a8 <UART_SetConfig+0x52c>
 800535a:	a201      	add	r2, pc, #4	; (adr r2, 8005360 <UART_SetConfig+0x4e4>)
 800535c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005360:	08005379 	.word	0x08005379
 8005364:	08005381 	.word	0x08005381
 8005368:	08005389 	.word	0x08005389
 800536c:	08005391 	.word	0x08005391
 8005370:	08005399 	.word	0x08005399
 8005374:	080053a1 	.word	0x080053a1
 8005378:	2300      	movs	r3, #0
 800537a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800537e:	e050      	b.n	8005422 <UART_SetConfig+0x5a6>
 8005380:	2304      	movs	r3, #4
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005386:	e04c      	b.n	8005422 <UART_SetConfig+0x5a6>
 8005388:	2308      	movs	r3, #8
 800538a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800538e:	e048      	b.n	8005422 <UART_SetConfig+0x5a6>
 8005390:	2310      	movs	r3, #16
 8005392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005396:	e044      	b.n	8005422 <UART_SetConfig+0x5a6>
 8005398:	2320      	movs	r3, #32
 800539a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800539e:	e040      	b.n	8005422 <UART_SetConfig+0x5a6>
 80053a0:	2340      	movs	r3, #64	; 0x40
 80053a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053a6:	e03c      	b.n	8005422 <UART_SetConfig+0x5a6>
 80053a8:	2380      	movs	r3, #128	; 0x80
 80053aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ae:	e038      	b.n	8005422 <UART_SetConfig+0x5a6>
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a5b      	ldr	r2, [pc, #364]	; (8005524 <UART_SetConfig+0x6a8>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d130      	bne.n	800541c <UART_SetConfig+0x5a0>
 80053ba:	4b57      	ldr	r3, [pc, #348]	; (8005518 <UART_SetConfig+0x69c>)
 80053bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	2b05      	cmp	r3, #5
 80053c4:	d826      	bhi.n	8005414 <UART_SetConfig+0x598>
 80053c6:	a201      	add	r2, pc, #4	; (adr r2, 80053cc <UART_SetConfig+0x550>)
 80053c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053cc:	080053e5 	.word	0x080053e5
 80053d0:	080053ed 	.word	0x080053ed
 80053d4:	080053f5 	.word	0x080053f5
 80053d8:	080053fd 	.word	0x080053fd
 80053dc:	08005405 	.word	0x08005405
 80053e0:	0800540d 	.word	0x0800540d
 80053e4:	2302      	movs	r3, #2
 80053e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ea:	e01a      	b.n	8005422 <UART_SetConfig+0x5a6>
 80053ec:	2304      	movs	r3, #4
 80053ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053f2:	e016      	b.n	8005422 <UART_SetConfig+0x5a6>
 80053f4:	2308      	movs	r3, #8
 80053f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053fa:	e012      	b.n	8005422 <UART_SetConfig+0x5a6>
 80053fc:	2310      	movs	r3, #16
 80053fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005402:	e00e      	b.n	8005422 <UART_SetConfig+0x5a6>
 8005404:	2320      	movs	r3, #32
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800540a:	e00a      	b.n	8005422 <UART_SetConfig+0x5a6>
 800540c:	2340      	movs	r3, #64	; 0x40
 800540e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005412:	e006      	b.n	8005422 <UART_SetConfig+0x5a6>
 8005414:	2380      	movs	r3, #128	; 0x80
 8005416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800541a:	e002      	b.n	8005422 <UART_SetConfig+0x5a6>
 800541c:	2380      	movs	r3, #128	; 0x80
 800541e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a3f      	ldr	r2, [pc, #252]	; (8005524 <UART_SetConfig+0x6a8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	f040 80f8 	bne.w	800561e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800542e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005432:	2b20      	cmp	r3, #32
 8005434:	dc46      	bgt.n	80054c4 <UART_SetConfig+0x648>
 8005436:	2b02      	cmp	r3, #2
 8005438:	f2c0 8082 	blt.w	8005540 <UART_SetConfig+0x6c4>
 800543c:	3b02      	subs	r3, #2
 800543e:	2b1e      	cmp	r3, #30
 8005440:	d87e      	bhi.n	8005540 <UART_SetConfig+0x6c4>
 8005442:	a201      	add	r2, pc, #4	; (adr r2, 8005448 <UART_SetConfig+0x5cc>)
 8005444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005448:	080054cb 	.word	0x080054cb
 800544c:	08005541 	.word	0x08005541
 8005450:	080054d3 	.word	0x080054d3
 8005454:	08005541 	.word	0x08005541
 8005458:	08005541 	.word	0x08005541
 800545c:	08005541 	.word	0x08005541
 8005460:	080054e3 	.word	0x080054e3
 8005464:	08005541 	.word	0x08005541
 8005468:	08005541 	.word	0x08005541
 800546c:	08005541 	.word	0x08005541
 8005470:	08005541 	.word	0x08005541
 8005474:	08005541 	.word	0x08005541
 8005478:	08005541 	.word	0x08005541
 800547c:	08005541 	.word	0x08005541
 8005480:	080054f3 	.word	0x080054f3
 8005484:	08005541 	.word	0x08005541
 8005488:	08005541 	.word	0x08005541
 800548c:	08005541 	.word	0x08005541
 8005490:	08005541 	.word	0x08005541
 8005494:	08005541 	.word	0x08005541
 8005498:	08005541 	.word	0x08005541
 800549c:	08005541 	.word	0x08005541
 80054a0:	08005541 	.word	0x08005541
 80054a4:	08005541 	.word	0x08005541
 80054a8:	08005541 	.word	0x08005541
 80054ac:	08005541 	.word	0x08005541
 80054b0:	08005541 	.word	0x08005541
 80054b4:	08005541 	.word	0x08005541
 80054b8:	08005541 	.word	0x08005541
 80054bc:	08005541 	.word	0x08005541
 80054c0:	08005533 	.word	0x08005533
 80054c4:	2b40      	cmp	r3, #64	; 0x40
 80054c6:	d037      	beq.n	8005538 <UART_SetConfig+0x6bc>
 80054c8:	e03a      	b.n	8005540 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80054ca:	f7fe fae3 	bl	8003a94 <HAL_RCCEx_GetD3PCLK1Freq>
 80054ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80054d0:	e03c      	b.n	800554c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fe faf2 	bl	8003ac0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80054dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054e0:	e034      	b.n	800554c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054e2:	f107 0318 	add.w	r3, r7, #24
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fe fc3e 	bl	8003d68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054f0:	e02c      	b.n	800554c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054f2:	4b09      	ldr	r3, [pc, #36]	; (8005518 <UART_SetConfig+0x69c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0320 	and.w	r3, r3, #32
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d016      	beq.n	800552c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80054fe:	4b06      	ldr	r3, [pc, #24]	; (8005518 <UART_SetConfig+0x69c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	08db      	lsrs	r3, r3, #3
 8005504:	f003 0303 	and.w	r3, r3, #3
 8005508:	4a07      	ldr	r2, [pc, #28]	; (8005528 <UART_SetConfig+0x6ac>)
 800550a:	fa22 f303 	lsr.w	r3, r2, r3
 800550e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005510:	e01c      	b.n	800554c <UART_SetConfig+0x6d0>
 8005512:	bf00      	nop
 8005514:	40011400 	.word	0x40011400
 8005518:	58024400 	.word	0x58024400
 800551c:	40007800 	.word	0x40007800
 8005520:	40007c00 	.word	0x40007c00
 8005524:	58000c00 	.word	0x58000c00
 8005528:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800552c:	4b9d      	ldr	r3, [pc, #628]	; (80057a4 <UART_SetConfig+0x928>)
 800552e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005530:	e00c      	b.n	800554c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005532:	4b9d      	ldr	r3, [pc, #628]	; (80057a8 <UART_SetConfig+0x92c>)
 8005534:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005536:	e009      	b.n	800554c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005538:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800553c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800553e:	e005      	b.n	800554c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005540:	2300      	movs	r3, #0
 8005542:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800554a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800554c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 81de 	beq.w	8005910 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	4a94      	ldr	r2, [pc, #592]	; (80057ac <UART_SetConfig+0x930>)
 800555a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800555e:	461a      	mov	r2, r3
 8005560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005562:	fbb3 f3f2 	udiv	r3, r3, r2
 8005566:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	4613      	mov	r3, r2
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	4413      	add	r3, r2
 8005572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005574:	429a      	cmp	r2, r3
 8005576:	d305      	bcc.n	8005584 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800557e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005580:	429a      	cmp	r2, r3
 8005582:	d903      	bls.n	800558c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800558a:	e1c1      	b.n	8005910 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800558c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800558e:	2200      	movs	r2, #0
 8005590:	60bb      	str	r3, [r7, #8]
 8005592:	60fa      	str	r2, [r7, #12]
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	4a84      	ldr	r2, [pc, #528]	; (80057ac <UART_SetConfig+0x930>)
 800559a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800559e:	b29b      	uxth	r3, r3
 80055a0:	2200      	movs	r2, #0
 80055a2:	603b      	str	r3, [r7, #0]
 80055a4:	607a      	str	r2, [r7, #4]
 80055a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055ae:	f7fa fe93 	bl	80002d8 <__aeabi_uldivmod>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4610      	mov	r0, r2
 80055b8:	4619      	mov	r1, r3
 80055ba:	f04f 0200 	mov.w	r2, #0
 80055be:	f04f 0300 	mov.w	r3, #0
 80055c2:	020b      	lsls	r3, r1, #8
 80055c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80055c8:	0202      	lsls	r2, r0, #8
 80055ca:	6979      	ldr	r1, [r7, #20]
 80055cc:	6849      	ldr	r1, [r1, #4]
 80055ce:	0849      	lsrs	r1, r1, #1
 80055d0:	2000      	movs	r0, #0
 80055d2:	460c      	mov	r4, r1
 80055d4:	4605      	mov	r5, r0
 80055d6:	eb12 0804 	adds.w	r8, r2, r4
 80055da:	eb43 0905 	adc.w	r9, r3, r5
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	469a      	mov	sl, r3
 80055e6:	4693      	mov	fp, r2
 80055e8:	4652      	mov	r2, sl
 80055ea:	465b      	mov	r3, fp
 80055ec:	4640      	mov	r0, r8
 80055ee:	4649      	mov	r1, r9
 80055f0:	f7fa fe72 	bl	80002d8 <__aeabi_uldivmod>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	4613      	mov	r3, r2
 80055fa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005602:	d308      	bcc.n	8005616 <UART_SetConfig+0x79a>
 8005604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800560a:	d204      	bcs.n	8005616 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005612:	60da      	str	r2, [r3, #12]
 8005614:	e17c      	b.n	8005910 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800561c:	e178      	b.n	8005910 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005626:	f040 80c5 	bne.w	80057b4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800562a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800562e:	2b20      	cmp	r3, #32
 8005630:	dc48      	bgt.n	80056c4 <UART_SetConfig+0x848>
 8005632:	2b00      	cmp	r3, #0
 8005634:	db7b      	blt.n	800572e <UART_SetConfig+0x8b2>
 8005636:	2b20      	cmp	r3, #32
 8005638:	d879      	bhi.n	800572e <UART_SetConfig+0x8b2>
 800563a:	a201      	add	r2, pc, #4	; (adr r2, 8005640 <UART_SetConfig+0x7c4>)
 800563c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005640:	080056cb 	.word	0x080056cb
 8005644:	080056d3 	.word	0x080056d3
 8005648:	0800572f 	.word	0x0800572f
 800564c:	0800572f 	.word	0x0800572f
 8005650:	080056db 	.word	0x080056db
 8005654:	0800572f 	.word	0x0800572f
 8005658:	0800572f 	.word	0x0800572f
 800565c:	0800572f 	.word	0x0800572f
 8005660:	080056eb 	.word	0x080056eb
 8005664:	0800572f 	.word	0x0800572f
 8005668:	0800572f 	.word	0x0800572f
 800566c:	0800572f 	.word	0x0800572f
 8005670:	0800572f 	.word	0x0800572f
 8005674:	0800572f 	.word	0x0800572f
 8005678:	0800572f 	.word	0x0800572f
 800567c:	0800572f 	.word	0x0800572f
 8005680:	080056fb 	.word	0x080056fb
 8005684:	0800572f 	.word	0x0800572f
 8005688:	0800572f 	.word	0x0800572f
 800568c:	0800572f 	.word	0x0800572f
 8005690:	0800572f 	.word	0x0800572f
 8005694:	0800572f 	.word	0x0800572f
 8005698:	0800572f 	.word	0x0800572f
 800569c:	0800572f 	.word	0x0800572f
 80056a0:	0800572f 	.word	0x0800572f
 80056a4:	0800572f 	.word	0x0800572f
 80056a8:	0800572f 	.word	0x0800572f
 80056ac:	0800572f 	.word	0x0800572f
 80056b0:	0800572f 	.word	0x0800572f
 80056b4:	0800572f 	.word	0x0800572f
 80056b8:	0800572f 	.word	0x0800572f
 80056bc:	0800572f 	.word	0x0800572f
 80056c0:	08005721 	.word	0x08005721
 80056c4:	2b40      	cmp	r3, #64	; 0x40
 80056c6:	d02e      	beq.n	8005726 <UART_SetConfig+0x8aa>
 80056c8:	e031      	b.n	800572e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056ca:	f7fc ff6d 	bl	80025a8 <HAL_RCC_GetPCLK1Freq>
 80056ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80056d0:	e033      	b.n	800573a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056d2:	f7fc ff7f 	bl	80025d4 <HAL_RCC_GetPCLK2Freq>
 80056d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80056d8:	e02f      	b.n	800573a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fe f9ee 	bl	8003ac0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056e8:	e027      	b.n	800573a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056ea:	f107 0318 	add.w	r3, r7, #24
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fe fb3a 	bl	8003d68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056f8:	e01f      	b.n	800573a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056fa:	4b2d      	ldr	r3, [pc, #180]	; (80057b0 <UART_SetConfig+0x934>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0320 	and.w	r3, r3, #32
 8005702:	2b00      	cmp	r3, #0
 8005704:	d009      	beq.n	800571a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005706:	4b2a      	ldr	r3, [pc, #168]	; (80057b0 <UART_SetConfig+0x934>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	08db      	lsrs	r3, r3, #3
 800570c:	f003 0303 	and.w	r3, r3, #3
 8005710:	4a24      	ldr	r2, [pc, #144]	; (80057a4 <UART_SetConfig+0x928>)
 8005712:	fa22 f303 	lsr.w	r3, r2, r3
 8005716:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005718:	e00f      	b.n	800573a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800571a:	4b22      	ldr	r3, [pc, #136]	; (80057a4 <UART_SetConfig+0x928>)
 800571c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800571e:	e00c      	b.n	800573a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005720:	4b21      	ldr	r3, [pc, #132]	; (80057a8 <UART_SetConfig+0x92c>)
 8005722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005724:	e009      	b.n	800573a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800572a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800572c:	e005      	b.n	800573a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005738:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800573a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 80e7 	beq.w	8005910 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005746:	4a19      	ldr	r2, [pc, #100]	; (80057ac <UART_SetConfig+0x930>)
 8005748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800574c:	461a      	mov	r2, r3
 800574e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005750:	fbb3 f3f2 	udiv	r3, r3, r2
 8005754:	005a      	lsls	r2, r3, #1
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	085b      	lsrs	r3, r3, #1
 800575c:	441a      	add	r2, r3
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	fbb2 f3f3 	udiv	r3, r2, r3
 8005766:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576a:	2b0f      	cmp	r3, #15
 800576c:	d916      	bls.n	800579c <UART_SetConfig+0x920>
 800576e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005774:	d212      	bcs.n	800579c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005778:	b29b      	uxth	r3, r3
 800577a:	f023 030f 	bic.w	r3, r3, #15
 800577e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005782:	085b      	lsrs	r3, r3, #1
 8005784:	b29b      	uxth	r3, r3
 8005786:	f003 0307 	and.w	r3, r3, #7
 800578a:	b29a      	uxth	r2, r3
 800578c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800578e:	4313      	orrs	r3, r2
 8005790:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005798:	60da      	str	r2, [r3, #12]
 800579a:	e0b9      	b.n	8005910 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80057a2:	e0b5      	b.n	8005910 <UART_SetConfig+0xa94>
 80057a4:	03d09000 	.word	0x03d09000
 80057a8:	003d0900 	.word	0x003d0900
 80057ac:	08006018 	.word	0x08006018
 80057b0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80057b4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80057b8:	2b20      	cmp	r3, #32
 80057ba:	dc49      	bgt.n	8005850 <UART_SetConfig+0x9d4>
 80057bc:	2b00      	cmp	r3, #0
 80057be:	db7c      	blt.n	80058ba <UART_SetConfig+0xa3e>
 80057c0:	2b20      	cmp	r3, #32
 80057c2:	d87a      	bhi.n	80058ba <UART_SetConfig+0xa3e>
 80057c4:	a201      	add	r2, pc, #4	; (adr r2, 80057cc <UART_SetConfig+0x950>)
 80057c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ca:	bf00      	nop
 80057cc:	08005857 	.word	0x08005857
 80057d0:	0800585f 	.word	0x0800585f
 80057d4:	080058bb 	.word	0x080058bb
 80057d8:	080058bb 	.word	0x080058bb
 80057dc:	08005867 	.word	0x08005867
 80057e0:	080058bb 	.word	0x080058bb
 80057e4:	080058bb 	.word	0x080058bb
 80057e8:	080058bb 	.word	0x080058bb
 80057ec:	08005877 	.word	0x08005877
 80057f0:	080058bb 	.word	0x080058bb
 80057f4:	080058bb 	.word	0x080058bb
 80057f8:	080058bb 	.word	0x080058bb
 80057fc:	080058bb 	.word	0x080058bb
 8005800:	080058bb 	.word	0x080058bb
 8005804:	080058bb 	.word	0x080058bb
 8005808:	080058bb 	.word	0x080058bb
 800580c:	08005887 	.word	0x08005887
 8005810:	080058bb 	.word	0x080058bb
 8005814:	080058bb 	.word	0x080058bb
 8005818:	080058bb 	.word	0x080058bb
 800581c:	080058bb 	.word	0x080058bb
 8005820:	080058bb 	.word	0x080058bb
 8005824:	080058bb 	.word	0x080058bb
 8005828:	080058bb 	.word	0x080058bb
 800582c:	080058bb 	.word	0x080058bb
 8005830:	080058bb 	.word	0x080058bb
 8005834:	080058bb 	.word	0x080058bb
 8005838:	080058bb 	.word	0x080058bb
 800583c:	080058bb 	.word	0x080058bb
 8005840:	080058bb 	.word	0x080058bb
 8005844:	080058bb 	.word	0x080058bb
 8005848:	080058bb 	.word	0x080058bb
 800584c:	080058ad 	.word	0x080058ad
 8005850:	2b40      	cmp	r3, #64	; 0x40
 8005852:	d02e      	beq.n	80058b2 <UART_SetConfig+0xa36>
 8005854:	e031      	b.n	80058ba <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005856:	f7fc fea7 	bl	80025a8 <HAL_RCC_GetPCLK1Freq>
 800585a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800585c:	e033      	b.n	80058c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800585e:	f7fc feb9 	bl	80025d4 <HAL_RCC_GetPCLK2Freq>
 8005862:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005864:	e02f      	b.n	80058c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800586a:	4618      	mov	r0, r3
 800586c:	f7fe f928 	bl	8003ac0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005874:	e027      	b.n	80058c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005876:	f107 0318 	add.w	r3, r7, #24
 800587a:	4618      	mov	r0, r3
 800587c:	f7fe fa74 	bl	8003d68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005884:	e01f      	b.n	80058c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005886:	4b2d      	ldr	r3, [pc, #180]	; (800593c <UART_SetConfig+0xac0>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0320 	and.w	r3, r3, #32
 800588e:	2b00      	cmp	r3, #0
 8005890:	d009      	beq.n	80058a6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005892:	4b2a      	ldr	r3, [pc, #168]	; (800593c <UART_SetConfig+0xac0>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	08db      	lsrs	r3, r3, #3
 8005898:	f003 0303 	and.w	r3, r3, #3
 800589c:	4a28      	ldr	r2, [pc, #160]	; (8005940 <UART_SetConfig+0xac4>)
 800589e:	fa22 f303 	lsr.w	r3, r2, r3
 80058a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058a4:	e00f      	b.n	80058c6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80058a6:	4b26      	ldr	r3, [pc, #152]	; (8005940 <UART_SetConfig+0xac4>)
 80058a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058aa:	e00c      	b.n	80058c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058ac:	4b25      	ldr	r3, [pc, #148]	; (8005944 <UART_SetConfig+0xac8>)
 80058ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058b0:	e009      	b.n	80058c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058b8:	e005      	b.n	80058c6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80058c4:	bf00      	nop
    }

    if (pclk != 0U)
 80058c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d021      	beq.n	8005910 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	4a1d      	ldr	r2, [pc, #116]	; (8005948 <UART_SetConfig+0xacc>)
 80058d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058d6:	461a      	mov	r2, r3
 80058d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058da:	fbb3 f2f2 	udiv	r2, r3, r2
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	085b      	lsrs	r3, r3, #1
 80058e4:	441a      	add	r2, r3
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f2:	2b0f      	cmp	r3, #15
 80058f4:	d909      	bls.n	800590a <UART_SetConfig+0xa8e>
 80058f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058fc:	d205      	bcs.n	800590a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005900:	b29a      	uxth	r2, r3
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	60da      	str	r2, [r3, #12]
 8005908:	e002      	b.n	8005910 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	2201      	movs	r2, #1
 8005914:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	2201      	movs	r2, #1
 800591c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2200      	movs	r2, #0
 8005924:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2200      	movs	r2, #0
 800592a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800592c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005930:	4618      	mov	r0, r3
 8005932:	3748      	adds	r7, #72	; 0x48
 8005934:	46bd      	mov	sp, r7
 8005936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800593a:	bf00      	nop
 800593c:	58024400 	.word	0x58024400
 8005940:	03d09000 	.word	0x03d09000
 8005944:	003d0900 	.word	0x003d0900
 8005948:	08006018 	.word	0x08006018

0800594c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00a      	beq.n	8005976 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	430a      	orrs	r2, r1
 8005996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00a      	beq.n	80059ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059be:	f003 0308 	and.w	r3, r3, #8
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e0:	f003 0310 	and.w	r3, r3, #16
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d01a      	beq.n	8005a62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a4a:	d10a      	bne.n	8005a62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	430a      	orrs	r2, r1
 8005a82:	605a      	str	r2, [r3, #4]
  }
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b098      	sub	sp, #96	; 0x60
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005aa0:	f7fb f99a 	bl	8000dd8 <HAL_GetTick>
 8005aa4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0308 	and.w	r3, r3, #8
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d12f      	bne.n	8005b14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005abc:	2200      	movs	r2, #0
 8005abe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f88e 	bl	8005be4 <UART_WaitOnFlagUntilTimeout>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d022      	beq.n	8005b14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ae2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	461a      	mov	r2, r3
 8005aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aec:	647b      	str	r3, [r7, #68]	; 0x44
 8005aee:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005af2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e6      	bne.n	8005ace <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e063      	b.n	8005bdc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0304 	and.w	r3, r3, #4
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d149      	bne.n	8005bb6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f857 	bl	8005be4 <UART_WaitOnFlagUntilTimeout>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d03c      	beq.n	8005bb6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	623b      	str	r3, [r7, #32]
   return(result);
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5a:	633b      	str	r3, [r7, #48]	; 0x30
 8005b5c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1e6      	bne.n	8005b3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3308      	adds	r3, #8
 8005b74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f023 0301 	bic.w	r3, r3, #1
 8005b84:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b8e:	61fa      	str	r2, [r7, #28]
 8005b90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b92:	69b9      	ldr	r1, [r7, #24]
 8005b94:	69fa      	ldr	r2, [r7, #28]
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	617b      	str	r3, [r7, #20]
   return(result);
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e5      	bne.n	8005b6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e012      	b.n	8005bdc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2220      	movs	r2, #32
 8005bba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3758      	adds	r7, #88	; 0x58
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	603b      	str	r3, [r7, #0]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bf4:	e049      	b.n	8005c8a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bfc:	d045      	beq.n	8005c8a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bfe:	f7fb f8eb 	bl	8000dd8 <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d302      	bcc.n	8005c14 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e048      	b.n	8005caa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0304 	and.w	r3, r3, #4
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d031      	beq.n	8005c8a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	f003 0308 	and.w	r3, r3, #8
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d110      	bne.n	8005c56 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2208      	movs	r2, #8
 8005c3a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 f839 	bl	8005cb4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2208      	movs	r2, #8
 8005c46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e029      	b.n	8005caa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69db      	ldr	r3, [r3, #28]
 8005c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c64:	d111      	bne.n	8005c8a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 f81f 	bl	8005cb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e00f      	b.n	8005caa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69da      	ldr	r2, [r3, #28]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	4013      	ands	r3, r2
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	bf0c      	ite	eq
 8005c9a:	2301      	moveq	r3, #1
 8005c9c:	2300      	movne	r3, #0
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	79fb      	ldrb	r3, [r7, #7]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d0a6      	beq.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
	...

08005cb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b095      	sub	sp, #84	; 0x54
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cda:	643b      	str	r3, [r7, #64]	; 0x40
 8005cdc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ce0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ce2:	e841 2300 	strex	r3, r2, [r1]
 8005ce6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1e6      	bne.n	8005cbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	3308      	adds	r3, #8
 8005cf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	e853 3f00 	ldrex	r3, [r3]
 8005cfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cfe:	69fa      	ldr	r2, [r7, #28]
 8005d00:	4b1e      	ldr	r3, [pc, #120]	; (8005d7c <UART_EndRxTransfer+0xc8>)
 8005d02:	4013      	ands	r3, r2
 8005d04:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3308      	adds	r3, #8
 8005d0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d16:	e841 2300 	strex	r3, r2, [r1]
 8005d1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1e5      	bne.n	8005cee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d118      	bne.n	8005d5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	e853 3f00 	ldrex	r3, [r3]
 8005d36:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f023 0310 	bic.w	r3, r3, #16
 8005d3e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	461a      	mov	r2, r3
 8005d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d48:	61bb      	str	r3, [r7, #24]
 8005d4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4c:	6979      	ldr	r1, [r7, #20]
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	e841 2300 	strex	r3, r2, [r1]
 8005d54:	613b      	str	r3, [r7, #16]
   return(result);
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1e6      	bne.n	8005d2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2220      	movs	r2, #32
 8005d60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005d70:	bf00      	nop
 8005d72:	3754      	adds	r7, #84	; 0x54
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	effffffe 	.word	0xeffffffe

08005d80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d101      	bne.n	8005d96 <HAL_UARTEx_DisableFifoMode+0x16>
 8005d92:	2302      	movs	r3, #2
 8005d94:	e027      	b.n	8005de6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2224      	movs	r2, #36	; 0x24
 8005da2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0201 	bic.w	r2, r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005dc4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b084      	sub	sp, #16
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d101      	bne.n	8005e0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e06:	2302      	movs	r3, #2
 8005e08:	e02d      	b.n	8005e66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2224      	movs	r2, #36	; 0x24
 8005e16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0201 	bic.w	r2, r2, #1
 8005e30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f850 	bl	8005eec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2220      	movs	r2, #32
 8005e58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b084      	sub	sp, #16
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d101      	bne.n	8005e86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e82:	2302      	movs	r3, #2
 8005e84:	e02d      	b.n	8005ee2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2224      	movs	r2, #36	; 0x24
 8005e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0201 	bic.w	r2, r2, #1
 8005eac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f812 	bl	8005eec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d108      	bne.n	8005f0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f0c:	e031      	b.n	8005f72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f0e:	2310      	movs	r3, #16
 8005f10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f12:	2310      	movs	r3, #16
 8005f14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	0e5b      	lsrs	r3, r3, #25
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	0f5b      	lsrs	r3, r3, #29
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	f003 0307 	and.w	r3, r3, #7
 8005f34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f36:	7bbb      	ldrb	r3, [r7, #14]
 8005f38:	7b3a      	ldrb	r2, [r7, #12]
 8005f3a:	4911      	ldr	r1, [pc, #68]	; (8005f80 <UARTEx_SetNbDataToProcess+0x94>)
 8005f3c:	5c8a      	ldrb	r2, [r1, r2]
 8005f3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f42:	7b3a      	ldrb	r2, [r7, #12]
 8005f44:	490f      	ldr	r1, [pc, #60]	; (8005f84 <UARTEx_SetNbDataToProcess+0x98>)
 8005f46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f48:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
 8005f56:	7b7a      	ldrb	r2, [r7, #13]
 8005f58:	4909      	ldr	r1, [pc, #36]	; (8005f80 <UARTEx_SetNbDataToProcess+0x94>)
 8005f5a:	5c8a      	ldrb	r2, [r1, r2]
 8005f5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f60:	7b7a      	ldrb	r2, [r7, #13]
 8005f62:	4908      	ldr	r1, [pc, #32]	; (8005f84 <UARTEx_SetNbDataToProcess+0x98>)
 8005f64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f66:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005f72:	bf00      	nop
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	08006030 	.word	0x08006030
 8005f84:	08006038 	.word	0x08006038

08005f88 <memset>:
 8005f88:	4402      	add	r2, r0
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d100      	bne.n	8005f92 <memset+0xa>
 8005f90:	4770      	bx	lr
 8005f92:	f803 1b01 	strb.w	r1, [r3], #1
 8005f96:	e7f9      	b.n	8005f8c <memset+0x4>

08005f98 <__libc_init_array>:
 8005f98:	b570      	push	{r4, r5, r6, lr}
 8005f9a:	4d0d      	ldr	r5, [pc, #52]	; (8005fd0 <__libc_init_array+0x38>)
 8005f9c:	4c0d      	ldr	r4, [pc, #52]	; (8005fd4 <__libc_init_array+0x3c>)
 8005f9e:	1b64      	subs	r4, r4, r5
 8005fa0:	10a4      	asrs	r4, r4, #2
 8005fa2:	2600      	movs	r6, #0
 8005fa4:	42a6      	cmp	r6, r4
 8005fa6:	d109      	bne.n	8005fbc <__libc_init_array+0x24>
 8005fa8:	4d0b      	ldr	r5, [pc, #44]	; (8005fd8 <__libc_init_array+0x40>)
 8005faa:	4c0c      	ldr	r4, [pc, #48]	; (8005fdc <__libc_init_array+0x44>)
 8005fac:	f000 f818 	bl	8005fe0 <_init>
 8005fb0:	1b64      	subs	r4, r4, r5
 8005fb2:	10a4      	asrs	r4, r4, #2
 8005fb4:	2600      	movs	r6, #0
 8005fb6:	42a6      	cmp	r6, r4
 8005fb8:	d105      	bne.n	8005fc6 <__libc_init_array+0x2e>
 8005fba:	bd70      	pop	{r4, r5, r6, pc}
 8005fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc0:	4798      	blx	r3
 8005fc2:	3601      	adds	r6, #1
 8005fc4:	e7ee      	b.n	8005fa4 <__libc_init_array+0xc>
 8005fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fca:	4798      	blx	r3
 8005fcc:	3601      	adds	r6, #1
 8005fce:	e7f2      	b.n	8005fb6 <__libc_init_array+0x1e>
 8005fd0:	08006048 	.word	0x08006048
 8005fd4:	08006048 	.word	0x08006048
 8005fd8:	08006048 	.word	0x08006048
 8005fdc:	0800604c 	.word	0x0800604c

08005fe0 <_init>:
 8005fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe2:	bf00      	nop
 8005fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fe6:	bc08      	pop	{r3}
 8005fe8:	469e      	mov	lr, r3
 8005fea:	4770      	bx	lr

08005fec <_fini>:
 8005fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fee:	bf00      	nop
 8005ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff2:	bc08      	pop	{r3}
 8005ff4:	469e      	mov	lr, r3
 8005ff6:	4770      	bx	lr
